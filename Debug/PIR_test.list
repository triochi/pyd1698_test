
PIR_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003798  08003798  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003798  08003798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037a0  080037a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037a4  080037a4  000137a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080037a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  08003818  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003818  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f40  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a11  00000000  00000000  00028fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007a0  00000000  00000000  0002a9f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b8  00000000  00000000  0002b198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021db6  00000000  00000000  0002b850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000755a  00000000  00000000  0004d606  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c898f  00000000  00000000  00054b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d4ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000244c  00000000  00000000  0011d56c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800368c 	.word	0x0800368c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800368c 	.word	0x0800368c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <DWT_Delay_Init>:
 * @return Error DWT counter
 * 1: clock cycle counter not started
 * 0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	/* Disable TRC */
//	CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
	/* Enable TRC */
//	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
	/* Disable clock cycle counter */
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <DWT_Delay_Init+0x40>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <DWT_Delay_Init+0x40>)
 80005ba:	f023 0301 	bic.w	r3, r3, #1
 80005be:	6013      	str	r3, [r2, #0]
	/* Enable clock cycle counter */
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <DWT_Delay_Init+0x40>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <DWT_Delay_Init+0x40>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]
	/* Reset the clock cycle counter value */
	DWT->CYCCNT = 0;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <DWT_Delay_Init+0x40>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	605a      	str	r2, [r3, #4]
/* 3 NO OPERATION instructions */
	__ASM volatile ("NOP");
 80005d2:	bf00      	nop
	__ASM volatile ("NOP");
 80005d4:	bf00      	nop
	__ASM volatile ("NOP");
 80005d6:	bf00      	nop
	/* Check if clock cycle counter has started */
	if(DWT->CYCCNT)
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <DWT_Delay_Init+0x40>)
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <DWT_Delay_Init+0x34>
	{
		return 0; /*clock cycle counter started*/
 80005e0:	2300      	movs	r3, #0
 80005e2:	e000      	b.n	80005e6 <DWT_Delay_Init+0x36>
	}
	else
	{
		return 1; /*clock cycle counter not started*/
 80005e4:	2301      	movs	r3, #1
	}
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e0001000 	.word	0xe0001000

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fc8c 	bl	8000f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f830 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f8c6 	bl	8000790 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000604:	f000 f89a 	bl	800073c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(DWT_Delay_Init())
 8000608:	f7ff ffd2 	bl	80005b0 <DWT_Delay_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <main+0x22>
  {
	  Error_Handler(); /* Call Error Handler */
 8000612:	f000 f925 	bl	8000860 <Error_Handler>
  }
  if(pir_init())
 8000616:	f000 fadd 	bl	8000bd4 <pir_init>
  {
//  	  Error_Handler(); /* Call Error Handler */
  }

  pir_clear_int();
 800061a:	f000 faab 	bl	8000b74 <pir_clear_int>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2120      	movs	r1, #32
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <main+0x64>)
 8000624:	f000 fff6 	bl	8001614 <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

//	  DWT_Delay_us(10000000);
	  if(motion_detected)
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <main+0x68>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0fb      	beq.n	8000628 <main+0x34>
	  {
		  motion_detected = 0;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <main+0x68>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
		  pir_clear_int();
 8000636:	f000 fa9d 	bl	8000b74 <pir_clear_int>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2120      	movs	r1, #32
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <main+0x64>)
 8000640:	f000 ffe8 	bl	8001614 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000644:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000648:	f000 fcd6 	bl	8000ff8 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	4801      	ldr	r0, [pc, #4]	; (8000658 <main+0x64>)
 8000652:	f000 ffdf 	bl	8001614 <HAL_GPIO_WritePin>
	  if(motion_detected)
 8000656:	e7e7      	b.n	8000628 <main+0x34>
 8000658:	40020000 	.word	0x40020000
 800065c:	200000a4 	.word	0x200000a4

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2234      	movs	r2, #52	; 0x34
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f002 f8bc 	bl	80027ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <SystemClock_Config+0xd4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a29      	ldr	r2, [pc, #164]	; (8000734 <SystemClock_Config+0xd4>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <SystemClock_Config+0xd4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a0:	2300      	movs	r3, #0
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <SystemClock_Config+0xd8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ac:	4a22      	ldr	r2, [pc, #136]	; (8000738 <SystemClock_Config+0xd8>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <SystemClock_Config+0xd8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d4:	2310      	movs	r3, #16
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006d8:	23c0      	movs	r3, #192	; 0xc0
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fa2f 	bl	8001b50 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006f8:	f000 f8b2 	bl	8000860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000708:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000712:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2103      	movs	r1, #3
 800071a:	4618      	mov	r0, r3
 800071c:	f000 ffac 	bl	8001678 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000726:	f000 f89b 	bl	8000860 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	; 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART2_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000774:	f001 fc46 	bl	8002004 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f86f 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000a8 	.word	0x200000a8
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_GPIO_Init+0x98>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	4a1e      	ldr	r2, [pc, #120]	; (8000828 <MX_GPIO_Init+0x98>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6313      	str	r3, [r2, #48]	; 0x30
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_GPIO_Init+0x98>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2120      	movs	r1, #32
 80007c4:	4819      	ldr	r0, [pc, #100]	; (800082c <MX_GPIO_Init+0x9c>)
 80007c6:	f000 ff25 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ca:	2301      	movs	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4814      	ldr	r0, [pc, #80]	; (800082c <MX_GPIO_Init+0x9c>)
 80007dc:	f000 fd70 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007e0:	2302      	movs	r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_GPIO_Init+0xa0>)
 80007e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	480e      	ldr	r0, [pc, #56]	; (800082c <MX_GPIO_Init+0x9c>)
 80007f2:	f000 fd65 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007f6:	2320      	movs	r3, #32
 80007f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4619      	mov	r1, r3
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <MX_GPIO_Init+0x9c>)
 800080c:	f000 fd58 	bl	80012c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	2007      	movs	r0, #7
 8000816:	f000 fd0e 	bl	8001236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800081a:	2007      	movs	r0, #7
 800081c:	f000 fd27 	bl	800126e <HAL_NVIC_EnableIRQ>

}
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000
 8000830:	10110000 	.word	0x10110000

08000834 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  motion_detected = 1;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_GPIO_EXTI_Callback+0x24>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000844:	2201      	movs	r2, #1
 8000846:	2120      	movs	r1, #32
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <HAL_GPIO_EXTI_Callback+0x28>)
 800084a:	f000 fee3 	bl	8001614 <HAL_GPIO_WritePin>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000a4 	.word	0x200000a4
 800085c:	40020000 	.word	0x40020000

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
	static err_cnt = 0;
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	err_cnt++;
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <Error_Handler+0x18>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	4a03      	ldr	r2, [pc, #12]	; (8000878 <Error_Handler+0x18>)
 800086c:	6013      	str	r3, [r2, #0]
  /* USER CODE END Error_Handler_Debug */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	2000008c 	.word	0x2000008c

0800087c <DWT_Delay_us>:
/**
 * @brief This function provides a delay (in microseconds)
 * @param microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <DWT_Delay_us+0x3c>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	60fb      	str	r3, [r7, #12]
 /* Go to number of cycles for system */
 microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800088a:	f000 ffdb 	bl	8001844 <HAL_RCC_GetHCLKFreq>
 800088e:	4602      	mov	r2, r0
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <DWT_Delay_us+0x40>)
 8000892:	fba3 2302 	umull	r2, r3, r3, r2
 8000896:	0c9b      	lsrs	r3, r3, #18
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	fb02 f303 	mul.w	r3, r2, r3
 800089e:	607b      	str	r3, [r7, #4]
 /* Delay till end */
 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80008a0:	bf00      	nop
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <DWT_Delay_us+0x3c>)
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	1ad2      	subs	r2, r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d3f8      	bcc.n	80008a2 <DWT_Delay_us+0x26>
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	e0001000 	.word	0xe0001000
 80008bc:	431bde83 	.word	0x431bde83

080008c0 <write_pir_regval>:
/*****************************************************************************

* @brief write register of pyd1698

*****************************************************************************/
void write_pir_regval(unsigned long regval){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
    int i;
    unsigned char nextbit;
    unsigned long regmask = 0x1000000;
 80008c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

      /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2101      	movs	r1, #1
 80008e2:	4827      	ldr	r0, [pc, #156]	; (8000980 <write_pir_regval+0xc0>)
 80008e4:	f000 fe96 	bl	8001614 <HAL_GPIO_WritePin>

     /*Configure GPIO pin : PA0 */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e8:	2301      	movs	r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	4619      	mov	r1, r3
 80008fa:	4821      	ldr	r0, [pc, #132]	; (8000980 <write_pir_regval+0xc0>)
 80008fc:	f000 fce0 	bl	80012c0 <HAL_GPIO_Init>
    // SINREG = (1<<SINPIN); //Set Serial In Port Output
    // SINPORT = (0<<SINPIN); // Set Serial In Pin LOW
    for(i=0;i < 25;i++){
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
 8000904:	e029      	b.n	800095a <write_pir_regval+0x9a>
        nextbit = (regval&regmask)!=0; //Set bit value to LSB register value
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	6a3b      	ldr	r3, [r7, #32]
 800090a:	4013      	ands	r3, r2
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf14      	ite	ne
 8000910:	2301      	movne	r3, #1
 8000912:	2300      	moveq	r3, #0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	77fb      	strb	r3, [r7, #31]
        regmask >>= 1; //shift mask
 8000918:	6a3b      	ldr	r3, [r7, #32]
 800091a:	085b      	lsrs	r3, r3, #1
 800091c:	623b      	str	r3, [r7, #32]

        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2101      	movs	r1, #1
 8000922:	4817      	ldr	r0, [pc, #92]	; (8000980 <write_pir_regval+0xc0>)
 8000924:	f000 fe76 	bl	8001614 <HAL_GPIO_WritePin>
        // SINPORT = (0<<SINPIN); //Set pin LOW

        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2101      	movs	r1, #1
 800092c:	4814      	ldr	r0, [pc, #80]	; (8000980 <write_pir_regval+0xc0>)
 800092e:	f000 fe71 	bl	8001614 <HAL_GPIO_WritePin>
        // SINPORT = (1<<SINPIN); //Set pin HIGH

        if (nextbit)
 8000932:	7ffb      	ldrb	r3, [r7, #31]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d005      	beq.n	8000944 <write_pir_regval+0x84>
        {
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2101      	movs	r1, #1
 800093c:	4810      	ldr	r0, [pc, #64]	; (8000980 <write_pir_regval+0xc0>)
 800093e:	f000 fe69 	bl	8001614 <HAL_GPIO_WritePin>
 8000942:	e004      	b.n	800094e <write_pir_regval+0x8e>
//            GPIO_PinOutSet(PIR_SERIN_PORT, PIR_SERIN_PIN);
        }
        else
        {
//            GPIO_PinOutClear(PIR_SERIN_PORT, PIR_SERIN_PIN);
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2101      	movs	r1, #1
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <write_pir_regval+0xc0>)
 800094a:	f000 fe63 	bl	8001614 <HAL_GPIO_WritePin>
        }
        // SINPORT = (nextbit << SINPIN); //Set pin to bit value

        DWT_Delay_us(100);
 800094e:	2064      	movs	r0, #100	; 0x64
 8000950:	f7ff ff94 	bl	800087c <DWT_Delay_us>
    for(i=0;i < 25;i++){
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	3301      	adds	r3, #1
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	2b18      	cmp	r3, #24
 800095e:	ddd2      	ble.n	8000906 <write_pir_regval+0x46>
    }
//    GPIO_PinOutClear(PIR_SERIN_PORT, PIR_SERIN_PIN);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2101      	movs	r1, #1
 8000964:	4806      	ldr	r0, [pc, #24]	; (8000980 <write_pir_regval+0xc0>)
 8000966:	f000 fe55 	bl	8001614 <HAL_GPIO_WritePin>
    // SINPORT = (0<<SINPIN); //Set pin LOW to end the operation
    DWT_Delay_us(600);
 800096a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800096e:	f7ff ff85 	bl	800087c <DWT_Delay_us>
    printf("written!");
 8000972:	4804      	ldr	r0, [pc, #16]	; (8000984 <write_pir_regval+0xc4>)
 8000974:	f001 ff42 	bl	80027fc <iprintf>
}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40020000 	.word	0x40020000
 8000984:	080036a4 	.word	0x080036a4

08000988 <read_pir_data>:
/*****************************************************************************

* @brief read PIR data

*****************************************************************************/
int read_pir_data(int * cfg){
 8000988:	b580      	push	{r7, lr}
 800098a:	b08c      	sub	sp, #48	; 0x30
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    int i;
    int a = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
    unsigned int uibitmask;
    unsigned long ulbitmask;
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]

    ulbitmask = 0x1000000; // Set BitPos
 80009a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009a8:	623b      	str	r3, [r7, #32]
    statcfg = 0;
 80009aa:	4b6e      	ldr	r3, [pc, #440]	; (8000b64 <read_pir_data+0x1dc>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]

    uibitmask = 0x4000; // Set BitPos
 80009b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
    PIRval = 0;
 80009b6:	4b6c      	ldr	r3, [pc, #432]	; (8000b68 <read_pir_data+0x1e0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
    HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80009bc:	2007      	movs	r0, #7
 80009be:	f000 fc64 	bl	800128a <HAL_NVIC_DisableIRQ>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2102      	movs	r1, #2
 80009c6:	4869      	ldr	r0, [pc, #420]	; (8000b6c <read_pir_data+0x1e4>)
 80009c8:	f000 fe24 	bl	8001614 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PA0 */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009cc:	2302      	movs	r3, #2
 80009ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	4863      	ldr	r0, [pc, #396]	; (8000b6c <read_pir_data+0x1e4>)
 80009e0:	f000 fc6e 	bl	80012c0 <HAL_GPIO_Init>

//    GPIO_PinModeSet(PIR_DL_PORT, PIR_DL_PIN, gpioModePushPull, 1);
    // DLPORT = (1<<DLPIN); // Set DL = High, to force fast uC controlled DL read out
    // DLREG = (1<<DLPIN); // Configure PORT DL as Output
    DWT_Delay_us(110);
 80009e4:	206e      	movs	r0, #110	; 0x6e
 80009e6:	f7ff ff49 	bl	800087c <DWT_Delay_us>
    // get first 15bit out-off-range and ADC value

    for (i=0; i < 15; i++){
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009ee:	e037      	b.n	8000a60 <read_pir_data+0xd8>
        // create low to high transition
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2102      	movs	r1, #2
 80009f4:	485d      	ldr	r0, [pc, #372]	; (8000b6c <read_pir_data+0x1e4>)
 80009f6:	f000 fe0d 	bl	8001614 <HAL_GPIO_WritePin>
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	4619      	mov	r1, r3
 8000a04:	4859      	ldr	r0, [pc, #356]	; (8000b6c <read_pir_data+0x1e4>)
 8000a06:	f000 fc5b 	bl	80012c0 <HAL_GPIO_Init>
//        GPIO_PinModeSet(PIR_DL_PORT, PIR_DL_PIN, gpioModePushPull, 0);
        // DLPORT = (0<<DLPIN); // Set DL = Low, duration must be > 200 ns (tL)
        // DLREG = (1<<DLPIN); // Configure DL as Output
        DWT_Delay_us(1);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff ff36 	bl	800087c <DWT_Delay_us>
        a=a;
        //asm("nop"); // number of nop dependant processor speed (200ns min.)
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2102      	movs	r1, #2
 8000a14:	4855      	ldr	r0, [pc, #340]	; (8000b6c <read_pir_data+0x1e4>)
 8000a16:	f000 fdfd 	bl	8001614 <HAL_GPIO_WritePin>
//        GPIO_PinOutSet(PIR_DL_PORT, PIR_DL_PIN);
        // DLPORT = (1<<DLPIN); // Set DL = High, duration must be > 200 ns (tH)
        DWT_Delay_us(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f7ff ff2e 	bl	800087c <DWT_Delay_us>
        a=a;

        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4850      	ldr	r0, [pc, #320]	; (8000b6c <read_pir_data+0x1e4>)
 8000a2c:	f000 fc48 	bl	80012c0 <HAL_GPIO_Init>
//        GPIO_PinModeSet(PIR_DL_PORT, PIR_DL_PIN, gpioModeInput, 0);
        // DLREG = (0<<DLPIN); // Configure DL as Input
        DWT_Delay_us(4);    // Wait for stable low signal
 8000a30:	2004      	movs	r0, #4
 8000a32:	f7ff ff23 	bl	800087c <DWT_Delay_us>
        // If DL High set masked bit in PIRVal

        // if (DLIN & 0x20)
//        if (GPIO_PinInGet(PIR_DL_PORT, PIR_DL_PIN))
        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000a36:	2102      	movs	r1, #2
 8000a38:	484c      	ldr	r0, [pc, #304]	; (8000b6c <read_pir_data+0x1e4>)
 8000a3a:	f000 fdd3 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d007      	beq.n	8000a54 <read_pir_data+0xcc>
        {
            PIRval |= uibitmask;
 8000a44:	4b48      	ldr	r3, [pc, #288]	; (8000b68 <read_pir_data+0x1e0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b45      	ldr	r3, [pc, #276]	; (8000b68 <read_pir_data+0x1e0>)
 8000a52:	601a      	str	r2, [r3, #0]
        }
        uibitmask>>=1;
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	085b      	lsrs	r3, r3, #1
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
    for (i=0; i < 15; i++){
 8000a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a62:	2b0e      	cmp	r3, #14
 8000a64:	ddc4      	ble.n	80009f0 <read_pir_data+0x68>
    }
    // get 25bit status and config

    for (i=0; i < 25; i++){
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a6a:	e032      	b.n	8000ad2 <read_pir_data+0x14a>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2102      	movs	r1, #2
 8000a70:	483e      	ldr	r0, [pc, #248]	; (8000b6c <read_pir_data+0x1e4>)
 8000a72:	f000 fdcf 	bl	8001614 <HAL_GPIO_WritePin>
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	613b      	str	r3, [r7, #16]
    	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4619      	mov	r1, r3
 8000a80:	483a      	ldr	r0, [pc, #232]	; (8000b6c <read_pir_data+0x1e4>)
 8000a82:	f000 fc1d 	bl	80012c0 <HAL_GPIO_Init>
//        GPIO_PinModeSet(PIR_DL_PORT, PIR_DL_PIN, gpioModePushPull, 0);
        // DLPORT = (0<<DLPIN); // Set DL = Low, duration must be > 200 ns (tL)
        // DLREG = (1<<DLPIN); // Configure DL as Output
        DWT_Delay_us(1);
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fef8 	bl	800087c <DWT_Delay_us>
        a=a;
        //asm("nop"); // number of nop dependant processor speed (200ns min.)
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2102      	movs	r1, #2
 8000a90:	4836      	ldr	r0, [pc, #216]	; (8000b6c <read_pir_data+0x1e4>)
 8000a92:	f000 fdbf 	bl	8001614 <HAL_GPIO_WritePin>
//        GPIO_PinOutSet(PIR_DL_PORT, PIR_DL_PIN);
        // DLPORT = (1<<DLPIN); // Set DL = High, duration must be > 200 ns (tH)
        // DWT_Delay_us(1);
        a=a;
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4832      	ldr	r0, [pc, #200]	; (8000b6c <read_pir_data+0x1e4>)
 8000aa2:	f000 fc0d 	bl	80012c0 <HAL_GPIO_Init>
//        GPIO_PinModeSet(PIR_DL_PORT, PIR_DL_PIN, gpioModeInput, 0);
        // DLREG = (0<<DLPIN); // Configure DL as Input
        DWT_Delay_us(4);    // Wait for stable low signal, tbd empirically using scope
 8000aa6:	2004      	movs	r0, #4
 8000aa8:	f7ff fee8 	bl	800087c <DWT_Delay_us>
        // If DL High set masked bit

        // if (DLIN & 0x20)
//        if (GPIO_PinInGet(PIR_DL_PORT, PIR_DL_PIN))
        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8000aac:	2102      	movs	r1, #2
 8000aae:	482f      	ldr	r0, [pc, #188]	; (8000b6c <read_pir_data+0x1e4>)
 8000ab0:	f000 fd98 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d005      	beq.n	8000ac6 <read_pir_data+0x13e>
        {
            statcfg |= ulbitmask;
 8000aba:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <read_pir_data+0x1dc>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	6a3b      	ldr	r3, [r7, #32]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	4a28      	ldr	r2, [pc, #160]	; (8000b64 <read_pir_data+0x1dc>)
 8000ac4:	6013      	str	r3, [r2, #0]
        }
        ulbitmask>>=1;
 8000ac6:	6a3b      	ldr	r3, [r7, #32]
 8000ac8:	085b      	lsrs	r3, r3, #1
 8000aca:	623b      	str	r3, [r7, #32]
    for (i=0; i < 25; i++){
 8000acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ace:	3301      	adds	r3, #1
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad4:	2b18      	cmp	r3, #24
 8000ad6:	ddc9      	ble.n	8000a6c <read_pir_data+0xe4>
    }
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2102      	movs	r1, #2
 8000adc:	4823      	ldr	r0, [pc, #140]	; (8000b6c <read_pir_data+0x1e4>)
 8000ade:	f000 fd99 	bl	8001614 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	4619      	mov	r1, r3
 8000aec:	481f      	ldr	r0, [pc, #124]	; (8000b6c <read_pir_data+0x1e4>)
 8000aee:	f000 fbe7 	bl	80012c0 <HAL_GPIO_Init>
//    GPIO_PinModeSet(PIR_DL_PORT, PIR_DL_PIN, gpioModePushPull, 0);
    // DLPORT = (0<<DLPIN); // Set DL = Low
    // DLREG = (1<<DLPIN); // Configure DL as Output
    DWT_Delay_us(1);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff fec2 	bl	800087c <DWT_Delay_us>
    a=a;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4619      	mov	r1, r3
 8000b02:	481a      	ldr	r0, [pc, #104]	; (8000b6c <read_pir_data+0x1e4>)
 8000b04:	f000 fbdc 	bl	80012c0 <HAL_GPIO_Init>
//    GPIO_PinModeSet(PIR_DL_PORT, PIR_DL_PIN, gpioModeInput, 0);
    // DLREG = (0<<DLPIN); // Configure DL as Input
    PIRval &= 0x3FFF; // clear unused bit
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <read_pir_data+0x1e0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b10:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <read_pir_data+0x1e0>)
 8000b12:	6013      	str	r3, [r2, #0]

    if (!(statcfg & 0x60)){
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <read_pir_data+0x1dc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10b      	bne.n	8000b38 <read_pir_data+0x1b0>
        // ADC source to PIR band pass
        // number in 14bit two's complement
        if(PIRval & 0x2000) PIRval -= 0x4000;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <read_pir_data+0x1e0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d005      	beq.n	8000b38 <read_pir_data+0x1b0>
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <read_pir_data+0x1e0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000b34:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <read_pir_data+0x1e0>)
 8000b36:	6013      	str	r3, [r2, #0]
    }

    printf("PIRVal: %d\tstatcfg: %ul\n",PIRval,(unsigned int)statcfg);
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <read_pir_data+0x1e0>)
 8000b3a:	6819      	ldr	r1, [r3, #0]
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <read_pir_data+0x1dc>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	480b      	ldr	r0, [pc, #44]	; (8000b70 <read_pir_data+0x1e8>)
 8000b44:	f001 fe5a 	bl	80027fc <iprintf>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b48:	2007      	movs	r0, #7
 8000b4a:	f000 fb90 	bl	800126e <HAL_NVIC_EnableIRQ>
    *cfg = statcfg;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <read_pir_data+0x1dc>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	601a      	str	r2, [r3, #0]
    return PIRval;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <read_pir_data+0x1e0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3730      	adds	r7, #48	; 0x30
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000094 	.word	0x20000094
 8000b68:	20000090 	.word	0x20000090
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	080036b4 	.word	0x080036b4

08000b74 <pir_clear_int>:


void pir_clear_int(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000b88:	2007      	movs	r0, #7
 8000b8a:	f000 fb7e 	bl	800128a <HAL_NVIC_DisableIRQ>

	 /*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2102      	movs	r1, #2
 8000b92:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <pir_clear_int+0x5c>)
 8000b94:	f000 fd3e 	bl	8001614 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <pir_clear_int+0x5c>)
 8000baa:	f000 fb89 	bl	80012c0 <HAL_GPIO_Init>

//    GPIO_PinModeSet(PIR_DL_PORT, PIR_DL_PIN, gpioModePushPull, 0);
    DWT_Delay_us(40);
 8000bae:	2028      	movs	r0, #40	; 0x28
 8000bb0:	f7ff fe64 	bl	800087c <DWT_Delay_us>
//    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
////    GPIO_PinOutSet(PIR_DL_PORT, PIR_DL_PIN);
//    DWT_Delay_us(1);
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <pir_clear_int+0x5c>)
 8000bbe:	f000 fb7f 	bl	80012c0 <HAL_GPIO_Init>
//    GPIO_PinModeSet(PIR_DL_PORT, PIR_DL_PIN, gpioModeInput, 0);
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000bc2:	2007      	movs	r0, #7
 8000bc4:	f000 fb53 	bl	800126e <HAL_NVIC_EnableIRQ>
}
 8000bc8:	bf00      	nop
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <pir_init>:

/**************************************************************************//**
 * PIR Init function
 *****************************************************************************/
int pir_init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  int cfg, cfg_read;
  {
            puts("Writing to register: ");            
 8000bda:	480d      	ldr	r0, [pc, #52]	; (8000c10 <pir_init+0x3c>)
 8000bdc:	f001 fe82 	bl	80028e4 <puts>
            HAL_Delay(10);
 8000be0:	200a      	movs	r0, #10
 8000be2:	f000 fa09 	bl	8000ff8 <HAL_Delay>
            //write_pir_regval(0x00000030); //For continuous reading
            // write_pir_regval(0x00304D10); //For interrupt mode
            // write_pir_regval(0x00304D90); //For wakeup mode
            //write_pir_regval(PIR_INIT_VALUE);
            cfg = PIR_INIT_VALUE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <pir_init+0x40>)
 8000be8:	607b      	str	r3, [r7, #4]
            write_pir_regval(cfg);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fe67 	bl	80008c0 <write_pir_regval>
            DWT_Delay_us(1000);
 8000bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf6:	f7ff fe41 	bl	800087c <DWT_Delay_us>
            read_pir_data(&cfg_read);
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fec3 	bl	8000988 <read_pir_data>
            pir_clear_int();
 8000c02:	f7ff ffb7 	bl	8000b74 <pir_clear_int>
            return 0;
 8000c06:	2300      	movs	r3, #0
        //     puts("Waiting done\n");
        //     PORTB = 0x00; //set LED to LOW
        //     DDRB = 0x10; // set B5 to input to catch movement
        // }
        //END
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	080036d0 	.word	0x080036d0
 8000c14:	00640131 	.word	0x00640131

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a19      	ldr	r2, [pc, #100]	; (8000cec <HAL_UART_MspInit+0x84>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d12b      	bne.n	8000ce2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_UART_MspInit+0x8c>)
 8000cde:	f000 faef 	bl	80012c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	; 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 f934 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f000 fc75 	bl	8001648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	e00a      	b.n	8000d8a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d74:	f3af 8000 	nop.w
 8000d78:	4601      	mov	r1, r0
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	60ba      	str	r2, [r7, #8]
 8000d80:	b2ca      	uxtb	r2, r1
 8000d82:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	3301      	adds	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	dbf0      	blt.n	8000d74 <_read+0x12>
	}

return len;
 8000d92:	687b      	ldr	r3, [r7, #4]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	e009      	b.n	8000dc2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	dbf1      	blt.n	8000dae <_write+0x12>
	}
	return len;
 8000dca:	687b      	ldr	r3, [r7, #4]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_close>:

int _close(int file)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	return -1;
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dfc:	605a      	str	r2, [r3, #4]
	return 0;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_isatty>:

int _isatty(int file)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	return 1;
 8000e14:	2301      	movs	r3, #1
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b085      	sub	sp, #20
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
	return 0;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x50>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <_sbrk+0x16>
		heap_end = &end;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <_sbrk+0x50>)
 8000e4e:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <_sbrk+0x54>)
 8000e50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <_sbrk+0x50>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <_sbrk+0x50>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	466a      	mov	r2, sp
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d907      	bls.n	8000e76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e66:	f001 fc97 	bl	8002798 <__errno>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e74:	e006      	b.n	8000e84 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <_sbrk+0x50>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a03      	ldr	r2, [pc, #12]	; (8000e8c <_sbrk+0x50>)
 8000e80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e82:	68fb      	ldr	r3, [r7, #12]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000098 	.word	0x20000098
 8000e90:	200000f8 	.word	0x200000f8

08000e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <SystemInit+0x28>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <SystemInit+0x28>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SystemInit+0x28>)
 8000eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eae:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ec4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ec6:	e003      	b.n	8000ed0 <LoopCopyDataInit>

08000ec8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ecc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ece:	3104      	adds	r1, #4

08000ed0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ed4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ed6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ed8:	d3f6      	bcc.n	8000ec8 <CopyDataInit>
  ldr  r2, =_sbss
 8000eda:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000edc:	e002      	b.n	8000ee4 <LoopFillZerobss>

08000ede <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ede:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee0:	f842 3b04 	str.w	r3, [r2], #4

08000ee4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ee6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ee8:	d3f9      	bcc.n	8000ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eea:	f7ff ffd3 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eee:	f001 fc59 	bl	80027a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef2:	f7ff fb7f 	bl	80005f4 <main>
  bx  lr    
 8000ef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000efc:	080037a8 	.word	0x080037a8
  ldr  r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f04:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000f08:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000f0c:	200000f4 	.word	0x200000f4

08000f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC_IRQHandler>
	...

08000f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <HAL_Init+0x40>)
 8000f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_Init+0x40>)
 8000f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_Init+0x40>)
 8000f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 f96f 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 f808 	bl	8000f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f48:	f7ff fe66 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023c00 	.word	0x40023c00

08000f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x54>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x58>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f995 	bl	80012a6 <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f94:	f000 f94f 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <HAL_InitTick+0x5c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	200000ec 	.word	0x200000ec

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	200000ec 	.word	0x200000ec

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff ffee 	bl	8000fe0 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_Delay+0x40>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffde 	bl	8000fe0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000008 	.word	0x20000008

0800103c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	60d3      	str	r3, [r2, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <__NVIC_GetPriorityGrouping+0x18>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	f003 0307 	and.w	r3, r3, #7
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	db0b      	blt.n	80010ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 021f 	and.w	r2, r3, #31
 80010b8:	4907      	ldr	r1, [pc, #28]	; (80010d8 <__NVIC_EnableIRQ+0x38>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	2001      	movs	r0, #1
 80010c2:	fa00 f202 	lsl.w	r2, r0, r2
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db10      	blt.n	8001110 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4909      	ldr	r1, [pc, #36]	; (800111c <__NVIC_DisableIRQ+0x40>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	3320      	adds	r3, #32
 8001104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001108:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800110c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff07 	bl	800103c <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff1c 	bl	8001084 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff8e 	bl	8001174 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff0f 	bl	80010a0 <__NVIC_EnableIRQ>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff1f 	bl	80010dc <__NVIC_DisableIRQ>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ff94 	bl	80011dc <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	e165      	b.n	80015a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f040 8154 	bne.w	80015a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d00b      	beq.n	800131a <HAL_GPIO_Init+0x5a>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800130e:	2b11      	cmp	r3, #17
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b12      	cmp	r3, #18
 8001318:	d130      	bne.n	800137c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001350:	2201      	movs	r2, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 0201 	and.w	r2, r3, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0xfc>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b12      	cmp	r3, #18
 80013ba:	d123      	bne.n	8001404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	69b9      	ldr	r1, [r7, #24]
 8001400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0203 	and.w	r2, r3, #3
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80ae 	beq.w	80015a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b5c      	ldr	r3, [pc, #368]	; (80015bc <HAL_GPIO_Init+0x2fc>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a5b      	ldr	r2, [pc, #364]	; (80015bc <HAL_GPIO_Init+0x2fc>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b59      	ldr	r3, [pc, #356]	; (80015bc <HAL_GPIO_Init+0x2fc>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001462:	4a57      	ldr	r2, [pc, #348]	; (80015c0 <HAL_GPIO_Init+0x300>)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4e      	ldr	r2, [pc, #312]	; (80015c4 <HAL_GPIO_Init+0x304>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d025      	beq.n	80014da <HAL_GPIO_Init+0x21a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4d      	ldr	r2, [pc, #308]	; (80015c8 <HAL_GPIO_Init+0x308>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d01f      	beq.n	80014d6 <HAL_GPIO_Init+0x216>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4c      	ldr	r2, [pc, #304]	; (80015cc <HAL_GPIO_Init+0x30c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d019      	beq.n	80014d2 <HAL_GPIO_Init+0x212>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4b      	ldr	r2, [pc, #300]	; (80015d0 <HAL_GPIO_Init+0x310>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d013      	beq.n	80014ce <HAL_GPIO_Init+0x20e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4a      	ldr	r2, [pc, #296]	; (80015d4 <HAL_GPIO_Init+0x314>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00d      	beq.n	80014ca <HAL_GPIO_Init+0x20a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a49      	ldr	r2, [pc, #292]	; (80015d8 <HAL_GPIO_Init+0x318>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d007      	beq.n	80014c6 <HAL_GPIO_Init+0x206>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a48      	ldr	r2, [pc, #288]	; (80015dc <HAL_GPIO_Init+0x31c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d101      	bne.n	80014c2 <HAL_GPIO_Init+0x202>
 80014be:	2306      	movs	r3, #6
 80014c0:	e00c      	b.n	80014dc <HAL_GPIO_Init+0x21c>
 80014c2:	2307      	movs	r3, #7
 80014c4:	e00a      	b.n	80014dc <HAL_GPIO_Init+0x21c>
 80014c6:	2305      	movs	r3, #5
 80014c8:	e008      	b.n	80014dc <HAL_GPIO_Init+0x21c>
 80014ca:	2304      	movs	r3, #4
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x21c>
 80014ce:	2303      	movs	r3, #3
 80014d0:	e004      	b.n	80014dc <HAL_GPIO_Init+0x21c>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e002      	b.n	80014dc <HAL_GPIO_Init+0x21c>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_GPIO_Init+0x21c>
 80014da:	2300      	movs	r3, #0
 80014dc:	69fa      	ldr	r2, [r7, #28]
 80014de:	f002 0203 	and.w	r2, r2, #3
 80014e2:	0092      	lsls	r2, r2, #2
 80014e4:	4093      	lsls	r3, r2
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ec:	4934      	ldr	r1, [pc, #208]	; (80015c0 <HAL_GPIO_Init+0x300>)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <HAL_GPIO_Init+0x320>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800151e:	4a30      	ldr	r2, [pc, #192]	; (80015e0 <HAL_GPIO_Init+0x320>)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <HAL_GPIO_Init+0x320>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001548:	4a25      	ldr	r2, [pc, #148]	; (80015e0 <HAL_GPIO_Init+0x320>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_GPIO_Init+0x320>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001572:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <HAL_GPIO_Init+0x320>)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_GPIO_Init+0x320>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800159c:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_GPIO_Init+0x320>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3301      	adds	r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	2b0f      	cmp	r3, #15
 80015ac:	f67f ae96 	bls.w	80012dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b0:	bf00      	nop
 80015b2:	3724      	adds	r7, #36	; 0x24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40013800 	.word	0x40013800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40021400 	.word	0x40021400
 80015dc:	40021800 	.word	0x40021800
 80015e0:	40013c00 	.word	0x40013c00

080015e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e001      	b.n	8001606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
 8001620:	4613      	mov	r3, r2
 8001622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001624:	787b      	ldrb	r3, [r7, #1]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001630:	e003      	b.n	800163a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001632:	887b      	ldrh	r3, [r7, #2]
 8001634:	041a      	lsls	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	619a      	str	r2, [r3, #24]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff f8e4 	bl	8000834 <HAL_GPIO_EXTI_Callback>
  }
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40013c00 	.word	0x40013c00

08001678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0cc      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800168c:	4b68      	ldr	r3, [pc, #416]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d90c      	bls.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b65      	ldr	r3, [pc, #404]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0b8      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d020      	beq.n	8001702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016cc:	4b59      	ldr	r3, [pc, #356]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a58      	ldr	r2, [pc, #352]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	494d      	ldr	r1, [pc, #308]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d044      	beq.n	8001798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d119      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e07f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d003      	beq.n	8001736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001732:	2b03      	cmp	r3, #3
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e067      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001756:	4b37      	ldr	r3, [pc, #220]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f023 0203 	bic.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4934      	ldr	r1, [pc, #208]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001768:	f7ff fc3a 	bl	8000fe0 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	e00a      	b.n	8001786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001770:	f7ff fc36 	bl	8000fe0 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	; 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e04f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 020c 	and.w	r2, r3, #12
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	429a      	cmp	r2, r3
 8001796:	d1eb      	bne.n	8001770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d20c      	bcs.n	80017c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e032      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4916      	ldr	r1, [pc, #88]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	490e      	ldr	r1, [pc, #56]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017fe:	f000 f855 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8001802:	4601      	mov	r1, r0
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	5cd3      	ldrb	r3, [r2, r3]
 8001812:	fa21 f303 	lsr.w	r3, r1, r3
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1c8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fb9a 	bl	8000f58 <HAL_InitTick>

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00
 8001834:	40023800 	.word	0x40023800
 8001838:	080036e8 	.word	0x080036e8
 800183c:	20000000 	.word	0x20000000
 8001840:	20000004 	.word	0x20000004

08001844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_RCC_GetHCLKFreq+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000000 	.word	0x20000000

0800185c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001860:	f7ff fff0 	bl	8001844 <HAL_RCC_GetHCLKFreq>
 8001864:	4601      	mov	r1, r0
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	0a9b      	lsrs	r3, r3, #10
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	4a03      	ldr	r2, [pc, #12]	; (8001880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001878:	4618      	mov	r0, r3
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	080036f8 	.word	0x080036f8

08001884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001888:	f7ff ffdc 	bl	8001844 <HAL_RCC_GetHCLKFreq>
 800188c:	4601      	mov	r1, r0
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	0b5b      	lsrs	r3, r3, #13
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800189a:	5cd3      	ldrb	r3, [r2, r3]
 800189c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	080036f8 	.word	0x080036f8

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c6:	4b9f      	ldr	r3, [pc, #636]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x298>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	f200 8130 	bhi.w	8001b34 <HAL_RCC_GetSysClockFreq+0x288>
 80018d4:	a201      	add	r2, pc, #4	; (adr r2, 80018dc <HAL_RCC_GetSysClockFreq+0x30>)
 80018d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018da:	bf00      	nop
 80018dc:	08001911 	.word	0x08001911
 80018e0:	08001b35 	.word	0x08001b35
 80018e4:	08001b35 	.word	0x08001b35
 80018e8:	08001b35 	.word	0x08001b35
 80018ec:	08001917 	.word	0x08001917
 80018f0:	08001b35 	.word	0x08001b35
 80018f4:	08001b35 	.word	0x08001b35
 80018f8:	08001b35 	.word	0x08001b35
 80018fc:	0800191d 	.word	0x0800191d
 8001900:	08001b35 	.word	0x08001b35
 8001904:	08001b35 	.word	0x08001b35
 8001908:	08001b35 	.word	0x08001b35
 800190c:	08001a2b 	.word	0x08001a2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001910:	4b8d      	ldr	r3, [pc, #564]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x29c>)
 8001912:	613b      	str	r3, [r7, #16]
       break;
 8001914:	e111      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001916:	4b8d      	ldr	r3, [pc, #564]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001918:	613b      	str	r3, [r7, #16]
      break;
 800191a:	e10e      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800191c:	4b89      	ldr	r3, [pc, #548]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x298>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001924:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001926:	4b87      	ldr	r3, [pc, #540]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x298>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d023      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001932:	4b84      	ldr	r3, [pc, #528]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x298>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	099b      	lsrs	r3, r3, #6
 8001938:	f04f 0400 	mov.w	r4, #0
 800193c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	ea03 0501 	and.w	r5, r3, r1
 8001948:	ea04 0602 	and.w	r6, r4, r2
 800194c:	4a7f      	ldr	r2, [pc, #508]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800194e:	fb02 f106 	mul.w	r1, r2, r6
 8001952:	2200      	movs	r2, #0
 8001954:	fb02 f205 	mul.w	r2, r2, r5
 8001958:	440a      	add	r2, r1
 800195a:	497c      	ldr	r1, [pc, #496]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x2a0>)
 800195c:	fba5 0101 	umull	r0, r1, r5, r1
 8001960:	1853      	adds	r3, r2, r1
 8001962:	4619      	mov	r1, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f04f 0400 	mov.w	r4, #0
 800196a:	461a      	mov	r2, r3
 800196c:	4623      	mov	r3, r4
 800196e:	f7fe fc9f 	bl	80002b0 <__aeabi_uldivmod>
 8001972:	4603      	mov	r3, r0
 8001974:	460c      	mov	r4, r1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e049      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197a:	4b72      	ldr	r3, [pc, #456]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x298>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	099b      	lsrs	r3, r3, #6
 8001980:	f04f 0400 	mov.w	r4, #0
 8001984:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	ea03 0501 	and.w	r5, r3, r1
 8001990:	ea04 0602 	and.w	r6, r4, r2
 8001994:	4629      	mov	r1, r5
 8001996:	4632      	mov	r2, r6
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	f04f 0400 	mov.w	r4, #0
 80019a0:	0154      	lsls	r4, r2, #5
 80019a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019a6:	014b      	lsls	r3, r1, #5
 80019a8:	4619      	mov	r1, r3
 80019aa:	4622      	mov	r2, r4
 80019ac:	1b49      	subs	r1, r1, r5
 80019ae:	eb62 0206 	sbc.w	r2, r2, r6
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	f04f 0400 	mov.w	r4, #0
 80019ba:	0194      	lsls	r4, r2, #6
 80019bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019c0:	018b      	lsls	r3, r1, #6
 80019c2:	1a5b      	subs	r3, r3, r1
 80019c4:	eb64 0402 	sbc.w	r4, r4, r2
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	00e2      	lsls	r2, r4, #3
 80019d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019d6:	00d9      	lsls	r1, r3, #3
 80019d8:	460b      	mov	r3, r1
 80019da:	4614      	mov	r4, r2
 80019dc:	195b      	adds	r3, r3, r5
 80019de:	eb44 0406 	adc.w	r4, r4, r6
 80019e2:	f04f 0100 	mov.w	r1, #0
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	02a2      	lsls	r2, r4, #10
 80019ec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019f0:	0299      	lsls	r1, r3, #10
 80019f2:	460b      	mov	r3, r1
 80019f4:	4614      	mov	r4, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	4621      	mov	r1, r4
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f04f 0400 	mov.w	r4, #0
 8001a00:	461a      	mov	r2, r3
 8001a02:	4623      	mov	r3, r4
 8001a04:	f7fe fc54 	bl	80002b0 <__aeabi_uldivmod>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	460c      	mov	r4, r1
 8001a0c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a0e:	4b4d      	ldr	r3, [pc, #308]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x298>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	0c1b      	lsrs	r3, r3, #16
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	3301      	adds	r3, #1
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	613b      	str	r3, [r7, #16]
      break;
 8001a28:	e087      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a2a:	4b46      	ldr	r3, [pc, #280]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x298>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a32:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a34:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x298>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d023      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a40:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x298>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	f04f 0400 	mov.w	r4, #0
 8001a4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	ea03 0501 	and.w	r5, r3, r1
 8001a56:	ea04 0602 	and.w	r6, r4, r2
 8001a5a:	4a3c      	ldr	r2, [pc, #240]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001a5c:	fb02 f106 	mul.w	r1, r2, r6
 8001a60:	2200      	movs	r2, #0
 8001a62:	fb02 f205 	mul.w	r2, r2, r5
 8001a66:	440a      	add	r2, r1
 8001a68:	4938      	ldr	r1, [pc, #224]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001a6a:	fba5 0101 	umull	r0, r1, r5, r1
 8001a6e:	1853      	adds	r3, r2, r1
 8001a70:	4619      	mov	r1, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f04f 0400 	mov.w	r4, #0
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	f7fe fc18 	bl	80002b0 <__aeabi_uldivmod>
 8001a80:	4603      	mov	r3, r0
 8001a82:	460c      	mov	r4, r1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e049      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a88:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x298>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	099b      	lsrs	r3, r3, #6
 8001a8e:	f04f 0400 	mov.w	r4, #0
 8001a92:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	ea03 0501 	and.w	r5, r3, r1
 8001a9e:	ea04 0602 	and.w	r6, r4, r2
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	4632      	mov	r2, r6
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	f04f 0400 	mov.w	r4, #0
 8001aae:	0154      	lsls	r4, r2, #5
 8001ab0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ab4:	014b      	lsls	r3, r1, #5
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4622      	mov	r2, r4
 8001aba:	1b49      	subs	r1, r1, r5
 8001abc:	eb62 0206 	sbc.w	r2, r2, r6
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	f04f 0400 	mov.w	r4, #0
 8001ac8:	0194      	lsls	r4, r2, #6
 8001aca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ace:	018b      	lsls	r3, r1, #6
 8001ad0:	1a5b      	subs	r3, r3, r1
 8001ad2:	eb64 0402 	sbc.w	r4, r4, r2
 8001ad6:	f04f 0100 	mov.w	r1, #0
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	00e2      	lsls	r2, r4, #3
 8001ae0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ae4:	00d9      	lsls	r1, r3, #3
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4614      	mov	r4, r2
 8001aea:	195b      	adds	r3, r3, r5
 8001aec:	eb44 0406 	adc.w	r4, r4, r6
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	02a2      	lsls	r2, r4, #10
 8001afa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001afe:	0299      	lsls	r1, r3, #10
 8001b00:	460b      	mov	r3, r1
 8001b02:	4614      	mov	r4, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	4621      	mov	r1, r4
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f04f 0400 	mov.w	r4, #0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4623      	mov	r3, r4
 8001b12:	f7fe fbcd 	bl	80002b0 <__aeabi_uldivmod>
 8001b16:	4603      	mov	r3, r0
 8001b18:	460c      	mov	r4, r1
 8001b1a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x298>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	0f1b      	lsrs	r3, r3, #28
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b30:	613b      	str	r3, [r7, #16]
      break;
 8001b32:	e002      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x29c>)
 8001b36:	613b      	str	r3, [r7, #16]
      break;
 8001b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3a:	693b      	ldr	r3, [r7, #16]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	371c      	adds	r7, #28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	00f42400 	.word	0x00f42400
 8001b4c:	017d7840 	.word	0x017d7840

08001b50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 8083 	beq.w	8001c70 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b6a:	4b95      	ldr	r3, [pc, #596]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d019      	beq.n	8001baa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b76:	4b92      	ldr	r3, [pc, #584]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d106      	bne.n	8001b90 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b82:	4b8f      	ldr	r3, [pc, #572]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b8e:	d00c      	beq.n	8001baa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b90:	4b8b      	ldr	r3, [pc, #556]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	d112      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9c:	4b88      	ldr	r3, [pc, #544]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ba8:	d10b      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001baa:	4b85      	ldr	r3, [pc, #532]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d05b      	beq.n	8001c6e <HAL_RCC_OscConfig+0x11e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d157      	bne.n	8001c6e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e216      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x8a>
 8001bcc:	4b7c      	ldr	r3, [pc, #496]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a7b      	ldr	r2, [pc, #492]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e01d      	b.n	8001c16 <HAL_RCC_OscConfig+0xc6>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be2:	d10c      	bne.n	8001bfe <HAL_RCC_OscConfig+0xae>
 8001be4:	4b76      	ldr	r3, [pc, #472]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a75      	ldr	r2, [pc, #468]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b73      	ldr	r3, [pc, #460]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a72      	ldr	r2, [pc, #456]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	e00b      	b.n	8001c16 <HAL_RCC_OscConfig+0xc6>
 8001bfe:	4b70      	ldr	r3, [pc, #448]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a6f      	ldr	r2, [pc, #444]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b6d      	ldr	r3, [pc, #436]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6c      	ldr	r2, [pc, #432]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d013      	beq.n	8001c46 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7ff f9df 	bl	8000fe0 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c26:	f7ff f9db 	bl	8000fe0 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b64      	cmp	r3, #100	; 0x64
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1db      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c38:	4b61      	ldr	r3, [pc, #388]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0xd6>
 8001c44:	e014      	b.n	8001c70 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7ff f9cb 	bl	8000fe0 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c4e:	f7ff f9c7 	bl	8000fe0 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b64      	cmp	r3, #100	; 0x64
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e1c7      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c60:	4b57      	ldr	r3, [pc, #348]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0xfe>
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d06f      	beq.n	8001d5c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d017      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c88:	4b4d      	ldr	r3, [pc, #308]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d105      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c94:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00b      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca0:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	d11c      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cac:	4b44      	ldr	r3, [pc, #272]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d116      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb8:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x180>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e18f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4938      	ldr	r1, [pc, #224]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce4:	e03a      	b.n	8001d5c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d020      	beq.n	8001d30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cee:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <HAL_RCC_OscConfig+0x274>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f974 	bl	8000fe0 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfc:	f7ff f970 	bl	8000fe0 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e170      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0e:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1a:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4925      	ldr	r1, [pc, #148]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
 8001d2e:	e015      	b.n	8001d5c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d30:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_RCC_OscConfig+0x274>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff f953 	bl	8000fe0 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff f94f 	bl	8000fe0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e14f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d037      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d016      	beq.n	8001d9e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_RCC_OscConfig+0x278>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d76:	f7ff f933 	bl	8000fe0 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7e:	f7ff f92f 	bl	8000fe0 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e12f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x22e>
 8001d9c:	e01c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_RCC_OscConfig+0x278>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7ff f91c 	bl	8000fe0 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001daa:	e00f      	b.n	8001dcc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dac:	f7ff f918 	bl	8000fe0 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d908      	bls.n	8001dcc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e118      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	42470000 	.word	0x42470000
 8001dc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dcc:	4b8a      	ldr	r3, [pc, #552]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1e9      	bne.n	8001dac <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 8097 	beq.w	8001f14 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dea:	4b83      	ldr	r3, [pc, #524]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10f      	bne.n	8001e16 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b7f      	ldr	r3, [pc, #508]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a7e      	ldr	r2, [pc, #504]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b7c      	ldr	r3, [pc, #496]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e12:	2301      	movs	r3, #1
 8001e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e16:	4b79      	ldr	r3, [pc, #484]	; (8001ffc <HAL_RCC_OscConfig+0x4ac>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d118      	bne.n	8001e54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e22:	4b76      	ldr	r3, [pc, #472]	; (8001ffc <HAL_RCC_OscConfig+0x4ac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a75      	ldr	r2, [pc, #468]	; (8001ffc <HAL_RCC_OscConfig+0x4ac>)
 8001e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f8d7 	bl	8000fe0 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e36:	f7ff f8d3 	bl	8000fe0 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e0d3      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	4b6c      	ldr	r3, [pc, #432]	; (8001ffc <HAL_RCC_OscConfig+0x4ac>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x31a>
 8001e5c:	4b66      	ldr	r3, [pc, #408]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	4a65      	ldr	r2, [pc, #404]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6713      	str	r3, [r2, #112]	; 0x70
 8001e68:	e01c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x354>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x33c>
 8001e72:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	4a60      	ldr	r2, [pc, #384]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7e:	4b5e      	ldr	r3, [pc, #376]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	4a5d      	ldr	r2, [pc, #372]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x354>
 8001e8c:	4b5a      	ldr	r3, [pc, #360]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	4a59      	ldr	r2, [pc, #356]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001e92:	f023 0301 	bic.w	r3, r3, #1
 8001e96:	6713      	str	r3, [r2, #112]	; 0x70
 8001e98:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	4a56      	ldr	r2, [pc, #344]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001e9e:	f023 0304 	bic.w	r3, r3, #4
 8001ea2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d015      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eac:	f7ff f898 	bl	8000fe0 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb4:	f7ff f894 	bl	8000fe0 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e092      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eca:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0ee      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x364>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7ff f882 	bl	8000fe0 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee0:	f7ff f87e 	bl	8000fe0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e07c      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef6:	4b40      	ldr	r3, [pc, #256]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1ee      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f08:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	4a3a      	ldr	r2, [pc, #232]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d068      	beq.n	8001fee <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d060      	beq.n	8001fea <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d145      	bne.n	8001fbc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b33      	ldr	r3, [pc, #204]	; (8002000 <HAL_RCC_OscConfig+0x4b0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f36:	f7ff f853 	bl	8000fe0 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7ff f84f 	bl	8000fe0 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e04f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69da      	ldr	r2, [r3, #28]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	019b      	lsls	r3, r3, #6
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	085b      	lsrs	r3, r3, #1
 8001f74:	3b01      	subs	r3, #1
 8001f76:	041b      	lsls	r3, r3, #16
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	061b      	lsls	r3, r3, #24
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	071b      	lsls	r3, r3, #28
 8001f88:	491b      	ldr	r1, [pc, #108]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <HAL_RCC_OscConfig+0x4b0>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff f824 	bl	8000fe0 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff f820 	bl	8000fe0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e020      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x44c>
 8001fba:	e018      	b.n	8001fee <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_RCC_OscConfig+0x4b0>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7ff f80d 	bl	8000fe0 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fca:	f7ff f809 	bl	8000fe0 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e009      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCC_OscConfig+0x4a8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x47a>
 8001fe8:	e001      	b.n	8001fee <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40007000 	.word	0x40007000
 8002000:	42470060 	.word	0x42470060

08002004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e03f      	b.n	8002096 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fe1c 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2224      	movs	r2, #36	; 0x24
 8002034:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f829 	bl	80020a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800205c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800206c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800207c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80020e2:	f023 030c 	bic.w	r3, r3, #12
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	68f9      	ldr	r1, [r7, #12]
 80020ec:	430b      	orrs	r3, r1
 80020ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800210e:	f040 818b 	bne.w	8002428 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4ac1      	ldr	r2, [pc, #772]	; (800241c <UART_SetConfig+0x37c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d005      	beq.n	8002128 <UART_SetConfig+0x88>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4abf      	ldr	r2, [pc, #764]	; (8002420 <UART_SetConfig+0x380>)
 8002122:	4293      	cmp	r3, r2
 8002124:	f040 80bd 	bne.w	80022a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002128:	f7ff fbac 	bl	8001884 <HAL_RCC_GetPCLK2Freq>
 800212c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	461d      	mov	r5, r3
 8002132:	f04f 0600 	mov.w	r6, #0
 8002136:	46a8      	mov	r8, r5
 8002138:	46b1      	mov	r9, r6
 800213a:	eb18 0308 	adds.w	r3, r8, r8
 800213e:	eb49 0409 	adc.w	r4, r9, r9
 8002142:	4698      	mov	r8, r3
 8002144:	46a1      	mov	r9, r4
 8002146:	eb18 0805 	adds.w	r8, r8, r5
 800214a:	eb49 0906 	adc.w	r9, r9, r6
 800214e:	f04f 0100 	mov.w	r1, #0
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800215a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800215e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002162:	4688      	mov	r8, r1
 8002164:	4691      	mov	r9, r2
 8002166:	eb18 0005 	adds.w	r0, r8, r5
 800216a:	eb49 0106 	adc.w	r1, r9, r6
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	461d      	mov	r5, r3
 8002174:	f04f 0600 	mov.w	r6, #0
 8002178:	196b      	adds	r3, r5, r5
 800217a:	eb46 0406 	adc.w	r4, r6, r6
 800217e:	461a      	mov	r2, r3
 8002180:	4623      	mov	r3, r4
 8002182:	f7fe f895 	bl	80002b0 <__aeabi_uldivmod>
 8002186:	4603      	mov	r3, r0
 8002188:	460c      	mov	r4, r1
 800218a:	461a      	mov	r2, r3
 800218c:	4ba5      	ldr	r3, [pc, #660]	; (8002424 <UART_SetConfig+0x384>)
 800218e:	fba3 2302 	umull	r2, r3, r3, r2
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	461d      	mov	r5, r3
 800219c:	f04f 0600 	mov.w	r6, #0
 80021a0:	46a9      	mov	r9, r5
 80021a2:	46b2      	mov	sl, r6
 80021a4:	eb19 0309 	adds.w	r3, r9, r9
 80021a8:	eb4a 040a 	adc.w	r4, sl, sl
 80021ac:	4699      	mov	r9, r3
 80021ae:	46a2      	mov	sl, r4
 80021b0:	eb19 0905 	adds.w	r9, r9, r5
 80021b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80021b8:	f04f 0100 	mov.w	r1, #0
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021cc:	4689      	mov	r9, r1
 80021ce:	4692      	mov	sl, r2
 80021d0:	eb19 0005 	adds.w	r0, r9, r5
 80021d4:	eb4a 0106 	adc.w	r1, sl, r6
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	461d      	mov	r5, r3
 80021de:	f04f 0600 	mov.w	r6, #0
 80021e2:	196b      	adds	r3, r5, r5
 80021e4:	eb46 0406 	adc.w	r4, r6, r6
 80021e8:	461a      	mov	r2, r3
 80021ea:	4623      	mov	r3, r4
 80021ec:	f7fe f860 	bl	80002b0 <__aeabi_uldivmod>
 80021f0:	4603      	mov	r3, r0
 80021f2:	460c      	mov	r4, r1
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b8b      	ldr	r3, [pc, #556]	; (8002424 <UART_SetConfig+0x384>)
 80021f8:	fba3 1302 	umull	r1, r3, r3, r2
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	2164      	movs	r1, #100	; 0x64
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	3332      	adds	r3, #50	; 0x32
 800220a:	4a86      	ldr	r2, [pc, #536]	; (8002424 <UART_SetConfig+0x384>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002218:	4498      	add	r8, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	461d      	mov	r5, r3
 800221e:	f04f 0600 	mov.w	r6, #0
 8002222:	46a9      	mov	r9, r5
 8002224:	46b2      	mov	sl, r6
 8002226:	eb19 0309 	adds.w	r3, r9, r9
 800222a:	eb4a 040a 	adc.w	r4, sl, sl
 800222e:	4699      	mov	r9, r3
 8002230:	46a2      	mov	sl, r4
 8002232:	eb19 0905 	adds.w	r9, r9, r5
 8002236:	eb4a 0a06 	adc.w	sl, sl, r6
 800223a:	f04f 0100 	mov.w	r1, #0
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002246:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800224a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800224e:	4689      	mov	r9, r1
 8002250:	4692      	mov	sl, r2
 8002252:	eb19 0005 	adds.w	r0, r9, r5
 8002256:	eb4a 0106 	adc.w	r1, sl, r6
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	461d      	mov	r5, r3
 8002260:	f04f 0600 	mov.w	r6, #0
 8002264:	196b      	adds	r3, r5, r5
 8002266:	eb46 0406 	adc.w	r4, r6, r6
 800226a:	461a      	mov	r2, r3
 800226c:	4623      	mov	r3, r4
 800226e:	f7fe f81f 	bl	80002b0 <__aeabi_uldivmod>
 8002272:	4603      	mov	r3, r0
 8002274:	460c      	mov	r4, r1
 8002276:	461a      	mov	r2, r3
 8002278:	4b6a      	ldr	r3, [pc, #424]	; (8002424 <UART_SetConfig+0x384>)
 800227a:	fba3 1302 	umull	r1, r3, r3, r2
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2164      	movs	r1, #100	; 0x64
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	3332      	adds	r3, #50	; 0x32
 800228c:	4a65      	ldr	r2, [pc, #404]	; (8002424 <UART_SetConfig+0x384>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	f003 0207 	and.w	r2, r3, #7
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4442      	add	r2, r8
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	e26f      	b.n	8002782 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022a2:	f7ff fadb 	bl	800185c <HAL_RCC_GetPCLK1Freq>
 80022a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	461d      	mov	r5, r3
 80022ac:	f04f 0600 	mov.w	r6, #0
 80022b0:	46a8      	mov	r8, r5
 80022b2:	46b1      	mov	r9, r6
 80022b4:	eb18 0308 	adds.w	r3, r8, r8
 80022b8:	eb49 0409 	adc.w	r4, r9, r9
 80022bc:	4698      	mov	r8, r3
 80022be:	46a1      	mov	r9, r4
 80022c0:	eb18 0805 	adds.w	r8, r8, r5
 80022c4:	eb49 0906 	adc.w	r9, r9, r6
 80022c8:	f04f 0100 	mov.w	r1, #0
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80022d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80022d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80022dc:	4688      	mov	r8, r1
 80022de:	4691      	mov	r9, r2
 80022e0:	eb18 0005 	adds.w	r0, r8, r5
 80022e4:	eb49 0106 	adc.w	r1, r9, r6
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	461d      	mov	r5, r3
 80022ee:	f04f 0600 	mov.w	r6, #0
 80022f2:	196b      	adds	r3, r5, r5
 80022f4:	eb46 0406 	adc.w	r4, r6, r6
 80022f8:	461a      	mov	r2, r3
 80022fa:	4623      	mov	r3, r4
 80022fc:	f7fd ffd8 	bl	80002b0 <__aeabi_uldivmod>
 8002300:	4603      	mov	r3, r0
 8002302:	460c      	mov	r4, r1
 8002304:	461a      	mov	r2, r3
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <UART_SetConfig+0x384>)
 8002308:	fba3 2302 	umull	r2, r3, r3, r2
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	461d      	mov	r5, r3
 8002316:	f04f 0600 	mov.w	r6, #0
 800231a:	46a9      	mov	r9, r5
 800231c:	46b2      	mov	sl, r6
 800231e:	eb19 0309 	adds.w	r3, r9, r9
 8002322:	eb4a 040a 	adc.w	r4, sl, sl
 8002326:	4699      	mov	r9, r3
 8002328:	46a2      	mov	sl, r4
 800232a:	eb19 0905 	adds.w	r9, r9, r5
 800232e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002332:	f04f 0100 	mov.w	r1, #0
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800233e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002342:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002346:	4689      	mov	r9, r1
 8002348:	4692      	mov	sl, r2
 800234a:	eb19 0005 	adds.w	r0, r9, r5
 800234e:	eb4a 0106 	adc.w	r1, sl, r6
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	461d      	mov	r5, r3
 8002358:	f04f 0600 	mov.w	r6, #0
 800235c:	196b      	adds	r3, r5, r5
 800235e:	eb46 0406 	adc.w	r4, r6, r6
 8002362:	461a      	mov	r2, r3
 8002364:	4623      	mov	r3, r4
 8002366:	f7fd ffa3 	bl	80002b0 <__aeabi_uldivmod>
 800236a:	4603      	mov	r3, r0
 800236c:	460c      	mov	r4, r1
 800236e:	461a      	mov	r2, r3
 8002370:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <UART_SetConfig+0x384>)
 8002372:	fba3 1302 	umull	r1, r3, r3, r2
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2164      	movs	r1, #100	; 0x64
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	3332      	adds	r3, #50	; 0x32
 8002384:	4a27      	ldr	r2, [pc, #156]	; (8002424 <UART_SetConfig+0x384>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002392:	4498      	add	r8, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	461d      	mov	r5, r3
 8002398:	f04f 0600 	mov.w	r6, #0
 800239c:	46a9      	mov	r9, r5
 800239e:	46b2      	mov	sl, r6
 80023a0:	eb19 0309 	adds.w	r3, r9, r9
 80023a4:	eb4a 040a 	adc.w	r4, sl, sl
 80023a8:	4699      	mov	r9, r3
 80023aa:	46a2      	mov	sl, r4
 80023ac:	eb19 0905 	adds.w	r9, r9, r5
 80023b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80023b4:	f04f 0100 	mov.w	r1, #0
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023c8:	4689      	mov	r9, r1
 80023ca:	4692      	mov	sl, r2
 80023cc:	eb19 0005 	adds.w	r0, r9, r5
 80023d0:	eb4a 0106 	adc.w	r1, sl, r6
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	461d      	mov	r5, r3
 80023da:	f04f 0600 	mov.w	r6, #0
 80023de:	196b      	adds	r3, r5, r5
 80023e0:	eb46 0406 	adc.w	r4, r6, r6
 80023e4:	461a      	mov	r2, r3
 80023e6:	4623      	mov	r3, r4
 80023e8:	f7fd ff62 	bl	80002b0 <__aeabi_uldivmod>
 80023ec:	4603      	mov	r3, r0
 80023ee:	460c      	mov	r4, r1
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <UART_SetConfig+0x384>)
 80023f4:	fba3 1302 	umull	r1, r3, r3, r2
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	2164      	movs	r1, #100	; 0x64
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	3332      	adds	r3, #50	; 0x32
 8002406:	4a07      	ldr	r2, [pc, #28]	; (8002424 <UART_SetConfig+0x384>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	f003 0207 	and.w	r2, r3, #7
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4442      	add	r2, r8
 8002418:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800241a:	e1b2      	b.n	8002782 <UART_SetConfig+0x6e2>
 800241c:	40011000 	.word	0x40011000
 8002420:	40011400 	.word	0x40011400
 8002424:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4ad7      	ldr	r2, [pc, #860]	; (800278c <UART_SetConfig+0x6ec>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d005      	beq.n	800243e <UART_SetConfig+0x39e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4ad6      	ldr	r2, [pc, #856]	; (8002790 <UART_SetConfig+0x6f0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	f040 80d1 	bne.w	80025e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800243e:	f7ff fa21 	bl	8001884 <HAL_RCC_GetPCLK2Freq>
 8002442:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	469a      	mov	sl, r3
 8002448:	f04f 0b00 	mov.w	fp, #0
 800244c:	46d0      	mov	r8, sl
 800244e:	46d9      	mov	r9, fp
 8002450:	eb18 0308 	adds.w	r3, r8, r8
 8002454:	eb49 0409 	adc.w	r4, r9, r9
 8002458:	4698      	mov	r8, r3
 800245a:	46a1      	mov	r9, r4
 800245c:	eb18 080a 	adds.w	r8, r8, sl
 8002460:	eb49 090b 	adc.w	r9, r9, fp
 8002464:	f04f 0100 	mov.w	r1, #0
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002470:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002474:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002478:	4688      	mov	r8, r1
 800247a:	4691      	mov	r9, r2
 800247c:	eb1a 0508 	adds.w	r5, sl, r8
 8002480:	eb4b 0609 	adc.w	r6, fp, r9
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4619      	mov	r1, r3
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	f04f 0400 	mov.w	r4, #0
 8002496:	0094      	lsls	r4, r2, #2
 8002498:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800249c:	008b      	lsls	r3, r1, #2
 800249e:	461a      	mov	r2, r3
 80024a0:	4623      	mov	r3, r4
 80024a2:	4628      	mov	r0, r5
 80024a4:	4631      	mov	r1, r6
 80024a6:	f7fd ff03 	bl	80002b0 <__aeabi_uldivmod>
 80024aa:	4603      	mov	r3, r0
 80024ac:	460c      	mov	r4, r1
 80024ae:	461a      	mov	r2, r3
 80024b0:	4bb8      	ldr	r3, [pc, #736]	; (8002794 <UART_SetConfig+0x6f4>)
 80024b2:	fba3 2302 	umull	r2, r3, r3, r2
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	469b      	mov	fp, r3
 80024c0:	f04f 0c00 	mov.w	ip, #0
 80024c4:	46d9      	mov	r9, fp
 80024c6:	46e2      	mov	sl, ip
 80024c8:	eb19 0309 	adds.w	r3, r9, r9
 80024cc:	eb4a 040a 	adc.w	r4, sl, sl
 80024d0:	4699      	mov	r9, r3
 80024d2:	46a2      	mov	sl, r4
 80024d4:	eb19 090b 	adds.w	r9, r9, fp
 80024d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024dc:	f04f 0100 	mov.w	r1, #0
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024f0:	4689      	mov	r9, r1
 80024f2:	4692      	mov	sl, r2
 80024f4:	eb1b 0509 	adds.w	r5, fp, r9
 80024f8:	eb4c 060a 	adc.w	r6, ip, sl
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4619      	mov	r1, r3
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	f04f 0400 	mov.w	r4, #0
 800250e:	0094      	lsls	r4, r2, #2
 8002510:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002514:	008b      	lsls	r3, r1, #2
 8002516:	461a      	mov	r2, r3
 8002518:	4623      	mov	r3, r4
 800251a:	4628      	mov	r0, r5
 800251c:	4631      	mov	r1, r6
 800251e:	f7fd fec7 	bl	80002b0 <__aeabi_uldivmod>
 8002522:	4603      	mov	r3, r0
 8002524:	460c      	mov	r4, r1
 8002526:	461a      	mov	r2, r3
 8002528:	4b9a      	ldr	r3, [pc, #616]	; (8002794 <UART_SetConfig+0x6f4>)
 800252a:	fba3 1302 	umull	r1, r3, r3, r2
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2164      	movs	r1, #100	; 0x64
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	3332      	adds	r3, #50	; 0x32
 800253c:	4a95      	ldr	r2, [pc, #596]	; (8002794 <UART_SetConfig+0x6f4>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002548:	4498      	add	r8, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	469b      	mov	fp, r3
 800254e:	f04f 0c00 	mov.w	ip, #0
 8002552:	46d9      	mov	r9, fp
 8002554:	46e2      	mov	sl, ip
 8002556:	eb19 0309 	adds.w	r3, r9, r9
 800255a:	eb4a 040a 	adc.w	r4, sl, sl
 800255e:	4699      	mov	r9, r3
 8002560:	46a2      	mov	sl, r4
 8002562:	eb19 090b 	adds.w	r9, r9, fp
 8002566:	eb4a 0a0c 	adc.w	sl, sl, ip
 800256a:	f04f 0100 	mov.w	r1, #0
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002576:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800257a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800257e:	4689      	mov	r9, r1
 8002580:	4692      	mov	sl, r2
 8002582:	eb1b 0509 	adds.w	r5, fp, r9
 8002586:	eb4c 060a 	adc.w	r6, ip, sl
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	f04f 0400 	mov.w	r4, #0
 800259c:	0094      	lsls	r4, r2, #2
 800259e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025a2:	008b      	lsls	r3, r1, #2
 80025a4:	461a      	mov	r2, r3
 80025a6:	4623      	mov	r3, r4
 80025a8:	4628      	mov	r0, r5
 80025aa:	4631      	mov	r1, r6
 80025ac:	f7fd fe80 	bl	80002b0 <__aeabi_uldivmod>
 80025b0:	4603      	mov	r3, r0
 80025b2:	460c      	mov	r4, r1
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b77      	ldr	r3, [pc, #476]	; (8002794 <UART_SetConfig+0x6f4>)
 80025b8:	fba3 1302 	umull	r1, r3, r3, r2
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	2164      	movs	r1, #100	; 0x64
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	3332      	adds	r3, #50	; 0x32
 80025ca:	4a72      	ldr	r2, [pc, #456]	; (8002794 <UART_SetConfig+0x6f4>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	095b      	lsrs	r3, r3, #5
 80025d2:	f003 020f 	and.w	r2, r3, #15
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4442      	add	r2, r8
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	e0d0      	b.n	8002782 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80025e0:	f7ff f93c 	bl	800185c <HAL_RCC_GetPCLK1Freq>
 80025e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	469a      	mov	sl, r3
 80025ea:	f04f 0b00 	mov.w	fp, #0
 80025ee:	46d0      	mov	r8, sl
 80025f0:	46d9      	mov	r9, fp
 80025f2:	eb18 0308 	adds.w	r3, r8, r8
 80025f6:	eb49 0409 	adc.w	r4, r9, r9
 80025fa:	4698      	mov	r8, r3
 80025fc:	46a1      	mov	r9, r4
 80025fe:	eb18 080a 	adds.w	r8, r8, sl
 8002602:	eb49 090b 	adc.w	r9, r9, fp
 8002606:	f04f 0100 	mov.w	r1, #0
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002612:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002616:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800261a:	4688      	mov	r8, r1
 800261c:	4691      	mov	r9, r2
 800261e:	eb1a 0508 	adds.w	r5, sl, r8
 8002622:	eb4b 0609 	adc.w	r6, fp, r9
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4619      	mov	r1, r3
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	f04f 0400 	mov.w	r4, #0
 8002638:	0094      	lsls	r4, r2, #2
 800263a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800263e:	008b      	lsls	r3, r1, #2
 8002640:	461a      	mov	r2, r3
 8002642:	4623      	mov	r3, r4
 8002644:	4628      	mov	r0, r5
 8002646:	4631      	mov	r1, r6
 8002648:	f7fd fe32 	bl	80002b0 <__aeabi_uldivmod>
 800264c:	4603      	mov	r3, r0
 800264e:	460c      	mov	r4, r1
 8002650:	461a      	mov	r2, r3
 8002652:	4b50      	ldr	r3, [pc, #320]	; (8002794 <UART_SetConfig+0x6f4>)
 8002654:	fba3 2302 	umull	r2, r3, r3, r2
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	469b      	mov	fp, r3
 8002662:	f04f 0c00 	mov.w	ip, #0
 8002666:	46d9      	mov	r9, fp
 8002668:	46e2      	mov	sl, ip
 800266a:	eb19 0309 	adds.w	r3, r9, r9
 800266e:	eb4a 040a 	adc.w	r4, sl, sl
 8002672:	4699      	mov	r9, r3
 8002674:	46a2      	mov	sl, r4
 8002676:	eb19 090b 	adds.w	r9, r9, fp
 800267a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800267e:	f04f 0100 	mov.w	r1, #0
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800268a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800268e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002692:	4689      	mov	r9, r1
 8002694:	4692      	mov	sl, r2
 8002696:	eb1b 0509 	adds.w	r5, fp, r9
 800269a:	eb4c 060a 	adc.w	r6, ip, sl
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4619      	mov	r1, r3
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	f04f 0400 	mov.w	r4, #0
 80026b0:	0094      	lsls	r4, r2, #2
 80026b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026b6:	008b      	lsls	r3, r1, #2
 80026b8:	461a      	mov	r2, r3
 80026ba:	4623      	mov	r3, r4
 80026bc:	4628      	mov	r0, r5
 80026be:	4631      	mov	r1, r6
 80026c0:	f7fd fdf6 	bl	80002b0 <__aeabi_uldivmod>
 80026c4:	4603      	mov	r3, r0
 80026c6:	460c      	mov	r4, r1
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b32      	ldr	r3, [pc, #200]	; (8002794 <UART_SetConfig+0x6f4>)
 80026cc:	fba3 1302 	umull	r1, r3, r3, r2
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	2164      	movs	r1, #100	; 0x64
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	3332      	adds	r3, #50	; 0x32
 80026de:	4a2d      	ldr	r2, [pc, #180]	; (8002794 <UART_SetConfig+0x6f4>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	095b      	lsrs	r3, r3, #5
 80026e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ea:	4498      	add	r8, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	469b      	mov	fp, r3
 80026f0:	f04f 0c00 	mov.w	ip, #0
 80026f4:	46d9      	mov	r9, fp
 80026f6:	46e2      	mov	sl, ip
 80026f8:	eb19 0309 	adds.w	r3, r9, r9
 80026fc:	eb4a 040a 	adc.w	r4, sl, sl
 8002700:	4699      	mov	r9, r3
 8002702:	46a2      	mov	sl, r4
 8002704:	eb19 090b 	adds.w	r9, r9, fp
 8002708:	eb4a 0a0c 	adc.w	sl, sl, ip
 800270c:	f04f 0100 	mov.w	r1, #0
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002718:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800271c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002720:	4689      	mov	r9, r1
 8002722:	4692      	mov	sl, r2
 8002724:	eb1b 0509 	adds.w	r5, fp, r9
 8002728:	eb4c 060a 	adc.w	r6, ip, sl
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4619      	mov	r1, r3
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	f04f 0400 	mov.w	r4, #0
 800273e:	0094      	lsls	r4, r2, #2
 8002740:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002744:	008b      	lsls	r3, r1, #2
 8002746:	461a      	mov	r2, r3
 8002748:	4623      	mov	r3, r4
 800274a:	4628      	mov	r0, r5
 800274c:	4631      	mov	r1, r6
 800274e:	f7fd fdaf 	bl	80002b0 <__aeabi_uldivmod>
 8002752:	4603      	mov	r3, r0
 8002754:	460c      	mov	r4, r1
 8002756:	461a      	mov	r2, r3
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <UART_SetConfig+0x6f4>)
 800275a:	fba3 1302 	umull	r1, r3, r3, r2
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	2164      	movs	r1, #100	; 0x64
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	3332      	adds	r3, #50	; 0x32
 800276c:	4a09      	ldr	r2, [pc, #36]	; (8002794 <UART_SetConfig+0x6f4>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	f003 020f 	and.w	r2, r3, #15
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4442      	add	r2, r8
 800277e:	609a      	str	r2, [r3, #8]
}
 8002780:	e7ff      	b.n	8002782 <UART_SetConfig+0x6e2>
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800278c:	40011000 	.word	0x40011000
 8002790:	40011400 	.word	0x40011400
 8002794:	51eb851f 	.word	0x51eb851f

08002798 <__errno>:
 8002798:	4b01      	ldr	r3, [pc, #4]	; (80027a0 <__errno+0x8>)
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	2000000c 	.word	0x2000000c

080027a4 <__libc_init_array>:
 80027a4:	b570      	push	{r4, r5, r6, lr}
 80027a6:	4e0d      	ldr	r6, [pc, #52]	; (80027dc <__libc_init_array+0x38>)
 80027a8:	4c0d      	ldr	r4, [pc, #52]	; (80027e0 <__libc_init_array+0x3c>)
 80027aa:	1ba4      	subs	r4, r4, r6
 80027ac:	10a4      	asrs	r4, r4, #2
 80027ae:	2500      	movs	r5, #0
 80027b0:	42a5      	cmp	r5, r4
 80027b2:	d109      	bne.n	80027c8 <__libc_init_array+0x24>
 80027b4:	4e0b      	ldr	r6, [pc, #44]	; (80027e4 <__libc_init_array+0x40>)
 80027b6:	4c0c      	ldr	r4, [pc, #48]	; (80027e8 <__libc_init_array+0x44>)
 80027b8:	f000 ff68 	bl	800368c <_init>
 80027bc:	1ba4      	subs	r4, r4, r6
 80027be:	10a4      	asrs	r4, r4, #2
 80027c0:	2500      	movs	r5, #0
 80027c2:	42a5      	cmp	r5, r4
 80027c4:	d105      	bne.n	80027d2 <__libc_init_array+0x2e>
 80027c6:	bd70      	pop	{r4, r5, r6, pc}
 80027c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027cc:	4798      	blx	r3
 80027ce:	3501      	adds	r5, #1
 80027d0:	e7ee      	b.n	80027b0 <__libc_init_array+0xc>
 80027d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027d6:	4798      	blx	r3
 80027d8:	3501      	adds	r5, #1
 80027da:	e7f2      	b.n	80027c2 <__libc_init_array+0x1e>
 80027dc:	080037a0 	.word	0x080037a0
 80027e0:	080037a0 	.word	0x080037a0
 80027e4:	080037a0 	.word	0x080037a0
 80027e8:	080037a4 	.word	0x080037a4

080027ec <memset>:
 80027ec:	4402      	add	r2, r0
 80027ee:	4603      	mov	r3, r0
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d100      	bne.n	80027f6 <memset+0xa>
 80027f4:	4770      	bx	lr
 80027f6:	f803 1b01 	strb.w	r1, [r3], #1
 80027fa:	e7f9      	b.n	80027f0 <memset+0x4>

080027fc <iprintf>:
 80027fc:	b40f      	push	{r0, r1, r2, r3}
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <iprintf+0x2c>)
 8002800:	b513      	push	{r0, r1, r4, lr}
 8002802:	681c      	ldr	r4, [r3, #0]
 8002804:	b124      	cbz	r4, 8002810 <iprintf+0x14>
 8002806:	69a3      	ldr	r3, [r4, #24]
 8002808:	b913      	cbnz	r3, 8002810 <iprintf+0x14>
 800280a:	4620      	mov	r0, r4
 800280c:	f000 fa22 	bl	8002c54 <__sinit>
 8002810:	ab05      	add	r3, sp, #20
 8002812:	9a04      	ldr	r2, [sp, #16]
 8002814:	68a1      	ldr	r1, [r4, #8]
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	4620      	mov	r0, r4
 800281a:	f000 fbdb 	bl	8002fd4 <_vfiprintf_r>
 800281e:	b002      	add	sp, #8
 8002820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002824:	b004      	add	sp, #16
 8002826:	4770      	bx	lr
 8002828:	2000000c 	.word	0x2000000c

0800282c <_puts_r>:
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	460e      	mov	r6, r1
 8002830:	4605      	mov	r5, r0
 8002832:	b118      	cbz	r0, 800283c <_puts_r+0x10>
 8002834:	6983      	ldr	r3, [r0, #24]
 8002836:	b90b      	cbnz	r3, 800283c <_puts_r+0x10>
 8002838:	f000 fa0c 	bl	8002c54 <__sinit>
 800283c:	69ab      	ldr	r3, [r5, #24]
 800283e:	68ac      	ldr	r4, [r5, #8]
 8002840:	b913      	cbnz	r3, 8002848 <_puts_r+0x1c>
 8002842:	4628      	mov	r0, r5
 8002844:	f000 fa06 	bl	8002c54 <__sinit>
 8002848:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <_puts_r+0xac>)
 800284a:	429c      	cmp	r4, r3
 800284c:	d117      	bne.n	800287e <_puts_r+0x52>
 800284e:	686c      	ldr	r4, [r5, #4]
 8002850:	89a3      	ldrh	r3, [r4, #12]
 8002852:	071b      	lsls	r3, r3, #28
 8002854:	d51d      	bpl.n	8002892 <_puts_r+0x66>
 8002856:	6923      	ldr	r3, [r4, #16]
 8002858:	b1db      	cbz	r3, 8002892 <_puts_r+0x66>
 800285a:	3e01      	subs	r6, #1
 800285c:	68a3      	ldr	r3, [r4, #8]
 800285e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002862:	3b01      	subs	r3, #1
 8002864:	60a3      	str	r3, [r4, #8]
 8002866:	b9e9      	cbnz	r1, 80028a4 <_puts_r+0x78>
 8002868:	2b00      	cmp	r3, #0
 800286a:	da2e      	bge.n	80028ca <_puts_r+0x9e>
 800286c:	4622      	mov	r2, r4
 800286e:	210a      	movs	r1, #10
 8002870:	4628      	mov	r0, r5
 8002872:	f000 f83f 	bl	80028f4 <__swbuf_r>
 8002876:	3001      	adds	r0, #1
 8002878:	d011      	beq.n	800289e <_puts_r+0x72>
 800287a:	200a      	movs	r0, #10
 800287c:	e011      	b.n	80028a2 <_puts_r+0x76>
 800287e:	4b17      	ldr	r3, [pc, #92]	; (80028dc <_puts_r+0xb0>)
 8002880:	429c      	cmp	r4, r3
 8002882:	d101      	bne.n	8002888 <_puts_r+0x5c>
 8002884:	68ac      	ldr	r4, [r5, #8]
 8002886:	e7e3      	b.n	8002850 <_puts_r+0x24>
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <_puts_r+0xb4>)
 800288a:	429c      	cmp	r4, r3
 800288c:	bf08      	it	eq
 800288e:	68ec      	ldreq	r4, [r5, #12]
 8002890:	e7de      	b.n	8002850 <_puts_r+0x24>
 8002892:	4621      	mov	r1, r4
 8002894:	4628      	mov	r0, r5
 8002896:	f000 f87f 	bl	8002998 <__swsetup_r>
 800289a:	2800      	cmp	r0, #0
 800289c:	d0dd      	beq.n	800285a <_puts_r+0x2e>
 800289e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028a2:	bd70      	pop	{r4, r5, r6, pc}
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	da04      	bge.n	80028b2 <_puts_r+0x86>
 80028a8:	69a2      	ldr	r2, [r4, #24]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	dc06      	bgt.n	80028bc <_puts_r+0x90>
 80028ae:	290a      	cmp	r1, #10
 80028b0:	d004      	beq.n	80028bc <_puts_r+0x90>
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	6022      	str	r2, [r4, #0]
 80028b8:	7019      	strb	r1, [r3, #0]
 80028ba:	e7cf      	b.n	800285c <_puts_r+0x30>
 80028bc:	4622      	mov	r2, r4
 80028be:	4628      	mov	r0, r5
 80028c0:	f000 f818 	bl	80028f4 <__swbuf_r>
 80028c4:	3001      	adds	r0, #1
 80028c6:	d1c9      	bne.n	800285c <_puts_r+0x30>
 80028c8:	e7e9      	b.n	800289e <_puts_r+0x72>
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	200a      	movs	r0, #10
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	6022      	str	r2, [r4, #0]
 80028d2:	7018      	strb	r0, [r3, #0]
 80028d4:	e7e5      	b.n	80028a2 <_puts_r+0x76>
 80028d6:	bf00      	nop
 80028d8:	08003724 	.word	0x08003724
 80028dc:	08003744 	.word	0x08003744
 80028e0:	08003704 	.word	0x08003704

080028e4 <puts>:
 80028e4:	4b02      	ldr	r3, [pc, #8]	; (80028f0 <puts+0xc>)
 80028e6:	4601      	mov	r1, r0
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	f7ff bf9f 	b.w	800282c <_puts_r>
 80028ee:	bf00      	nop
 80028f0:	2000000c 	.word	0x2000000c

080028f4 <__swbuf_r>:
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	460e      	mov	r6, r1
 80028f8:	4614      	mov	r4, r2
 80028fa:	4605      	mov	r5, r0
 80028fc:	b118      	cbz	r0, 8002906 <__swbuf_r+0x12>
 80028fe:	6983      	ldr	r3, [r0, #24]
 8002900:	b90b      	cbnz	r3, 8002906 <__swbuf_r+0x12>
 8002902:	f000 f9a7 	bl	8002c54 <__sinit>
 8002906:	4b21      	ldr	r3, [pc, #132]	; (800298c <__swbuf_r+0x98>)
 8002908:	429c      	cmp	r4, r3
 800290a:	d12a      	bne.n	8002962 <__swbuf_r+0x6e>
 800290c:	686c      	ldr	r4, [r5, #4]
 800290e:	69a3      	ldr	r3, [r4, #24]
 8002910:	60a3      	str	r3, [r4, #8]
 8002912:	89a3      	ldrh	r3, [r4, #12]
 8002914:	071a      	lsls	r2, r3, #28
 8002916:	d52e      	bpl.n	8002976 <__swbuf_r+0x82>
 8002918:	6923      	ldr	r3, [r4, #16]
 800291a:	b363      	cbz	r3, 8002976 <__swbuf_r+0x82>
 800291c:	6923      	ldr	r3, [r4, #16]
 800291e:	6820      	ldr	r0, [r4, #0]
 8002920:	1ac0      	subs	r0, r0, r3
 8002922:	6963      	ldr	r3, [r4, #20]
 8002924:	b2f6      	uxtb	r6, r6
 8002926:	4283      	cmp	r3, r0
 8002928:	4637      	mov	r7, r6
 800292a:	dc04      	bgt.n	8002936 <__swbuf_r+0x42>
 800292c:	4621      	mov	r1, r4
 800292e:	4628      	mov	r0, r5
 8002930:	f000 f926 	bl	8002b80 <_fflush_r>
 8002934:	bb28      	cbnz	r0, 8002982 <__swbuf_r+0x8e>
 8002936:	68a3      	ldr	r3, [r4, #8]
 8002938:	3b01      	subs	r3, #1
 800293a:	60a3      	str	r3, [r4, #8]
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	6022      	str	r2, [r4, #0]
 8002942:	701e      	strb	r6, [r3, #0]
 8002944:	6963      	ldr	r3, [r4, #20]
 8002946:	3001      	adds	r0, #1
 8002948:	4283      	cmp	r3, r0
 800294a:	d004      	beq.n	8002956 <__swbuf_r+0x62>
 800294c:	89a3      	ldrh	r3, [r4, #12]
 800294e:	07db      	lsls	r3, r3, #31
 8002950:	d519      	bpl.n	8002986 <__swbuf_r+0x92>
 8002952:	2e0a      	cmp	r6, #10
 8002954:	d117      	bne.n	8002986 <__swbuf_r+0x92>
 8002956:	4621      	mov	r1, r4
 8002958:	4628      	mov	r0, r5
 800295a:	f000 f911 	bl	8002b80 <_fflush_r>
 800295e:	b190      	cbz	r0, 8002986 <__swbuf_r+0x92>
 8002960:	e00f      	b.n	8002982 <__swbuf_r+0x8e>
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <__swbuf_r+0x9c>)
 8002964:	429c      	cmp	r4, r3
 8002966:	d101      	bne.n	800296c <__swbuf_r+0x78>
 8002968:	68ac      	ldr	r4, [r5, #8]
 800296a:	e7d0      	b.n	800290e <__swbuf_r+0x1a>
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <__swbuf_r+0xa0>)
 800296e:	429c      	cmp	r4, r3
 8002970:	bf08      	it	eq
 8002972:	68ec      	ldreq	r4, [r5, #12]
 8002974:	e7cb      	b.n	800290e <__swbuf_r+0x1a>
 8002976:	4621      	mov	r1, r4
 8002978:	4628      	mov	r0, r5
 800297a:	f000 f80d 	bl	8002998 <__swsetup_r>
 800297e:	2800      	cmp	r0, #0
 8002980:	d0cc      	beq.n	800291c <__swbuf_r+0x28>
 8002982:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002986:	4638      	mov	r0, r7
 8002988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800298a:	bf00      	nop
 800298c:	08003724 	.word	0x08003724
 8002990:	08003744 	.word	0x08003744
 8002994:	08003704 	.word	0x08003704

08002998 <__swsetup_r>:
 8002998:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <__swsetup_r+0xcc>)
 800299a:	b570      	push	{r4, r5, r6, lr}
 800299c:	681d      	ldr	r5, [r3, #0]
 800299e:	4606      	mov	r6, r0
 80029a0:	460c      	mov	r4, r1
 80029a2:	b125      	cbz	r5, 80029ae <__swsetup_r+0x16>
 80029a4:	69ab      	ldr	r3, [r5, #24]
 80029a6:	b913      	cbnz	r3, 80029ae <__swsetup_r+0x16>
 80029a8:	4628      	mov	r0, r5
 80029aa:	f000 f953 	bl	8002c54 <__sinit>
 80029ae:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <__swsetup_r+0xd0>)
 80029b0:	429c      	cmp	r4, r3
 80029b2:	d10f      	bne.n	80029d4 <__swsetup_r+0x3c>
 80029b4:	686c      	ldr	r4, [r5, #4]
 80029b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	0715      	lsls	r5, r2, #28
 80029be:	d42c      	bmi.n	8002a1a <__swsetup_r+0x82>
 80029c0:	06d0      	lsls	r0, r2, #27
 80029c2:	d411      	bmi.n	80029e8 <__swsetup_r+0x50>
 80029c4:	2209      	movs	r2, #9
 80029c6:	6032      	str	r2, [r6, #0]
 80029c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029cc:	81a3      	strh	r3, [r4, #12]
 80029ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029d2:	e03e      	b.n	8002a52 <__swsetup_r+0xba>
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <__swsetup_r+0xd4>)
 80029d6:	429c      	cmp	r4, r3
 80029d8:	d101      	bne.n	80029de <__swsetup_r+0x46>
 80029da:	68ac      	ldr	r4, [r5, #8]
 80029dc:	e7eb      	b.n	80029b6 <__swsetup_r+0x1e>
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <__swsetup_r+0xd8>)
 80029e0:	429c      	cmp	r4, r3
 80029e2:	bf08      	it	eq
 80029e4:	68ec      	ldreq	r4, [r5, #12]
 80029e6:	e7e6      	b.n	80029b6 <__swsetup_r+0x1e>
 80029e8:	0751      	lsls	r1, r2, #29
 80029ea:	d512      	bpl.n	8002a12 <__swsetup_r+0x7a>
 80029ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029ee:	b141      	cbz	r1, 8002a02 <__swsetup_r+0x6a>
 80029f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029f4:	4299      	cmp	r1, r3
 80029f6:	d002      	beq.n	80029fe <__swsetup_r+0x66>
 80029f8:	4630      	mov	r0, r6
 80029fa:	f000 fa19 	bl	8002e30 <_free_r>
 80029fe:	2300      	movs	r3, #0
 8002a00:	6363      	str	r3, [r4, #52]	; 0x34
 8002a02:	89a3      	ldrh	r3, [r4, #12]
 8002a04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002a08:	81a3      	strh	r3, [r4, #12]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	6063      	str	r3, [r4, #4]
 8002a0e:	6923      	ldr	r3, [r4, #16]
 8002a10:	6023      	str	r3, [r4, #0]
 8002a12:	89a3      	ldrh	r3, [r4, #12]
 8002a14:	f043 0308 	orr.w	r3, r3, #8
 8002a18:	81a3      	strh	r3, [r4, #12]
 8002a1a:	6923      	ldr	r3, [r4, #16]
 8002a1c:	b94b      	cbnz	r3, 8002a32 <__swsetup_r+0x9a>
 8002a1e:	89a3      	ldrh	r3, [r4, #12]
 8002a20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a28:	d003      	beq.n	8002a32 <__swsetup_r+0x9a>
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f000 f9bf 	bl	8002db0 <__smakebuf_r>
 8002a32:	89a2      	ldrh	r2, [r4, #12]
 8002a34:	f012 0301 	ands.w	r3, r2, #1
 8002a38:	d00c      	beq.n	8002a54 <__swsetup_r+0xbc>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60a3      	str	r3, [r4, #8]
 8002a3e:	6963      	ldr	r3, [r4, #20]
 8002a40:	425b      	negs	r3, r3
 8002a42:	61a3      	str	r3, [r4, #24]
 8002a44:	6923      	ldr	r3, [r4, #16]
 8002a46:	b953      	cbnz	r3, 8002a5e <__swsetup_r+0xc6>
 8002a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a4c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002a50:	d1ba      	bne.n	80029c8 <__swsetup_r+0x30>
 8002a52:	bd70      	pop	{r4, r5, r6, pc}
 8002a54:	0792      	lsls	r2, r2, #30
 8002a56:	bf58      	it	pl
 8002a58:	6963      	ldrpl	r3, [r4, #20]
 8002a5a:	60a3      	str	r3, [r4, #8]
 8002a5c:	e7f2      	b.n	8002a44 <__swsetup_r+0xac>
 8002a5e:	2000      	movs	r0, #0
 8002a60:	e7f7      	b.n	8002a52 <__swsetup_r+0xba>
 8002a62:	bf00      	nop
 8002a64:	2000000c 	.word	0x2000000c
 8002a68:	08003724 	.word	0x08003724
 8002a6c:	08003744 	.word	0x08003744
 8002a70:	08003704 	.word	0x08003704

08002a74 <__sflush_r>:
 8002a74:	898a      	ldrh	r2, [r1, #12]
 8002a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a7a:	4605      	mov	r5, r0
 8002a7c:	0710      	lsls	r0, r2, #28
 8002a7e:	460c      	mov	r4, r1
 8002a80:	d458      	bmi.n	8002b34 <__sflush_r+0xc0>
 8002a82:	684b      	ldr	r3, [r1, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	dc05      	bgt.n	8002a94 <__sflush_r+0x20>
 8002a88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc02      	bgt.n	8002a94 <__sflush_r+0x20>
 8002a8e:	2000      	movs	r0, #0
 8002a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a96:	2e00      	cmp	r6, #0
 8002a98:	d0f9      	beq.n	8002a8e <__sflush_r+0x1a>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002aa0:	682f      	ldr	r7, [r5, #0]
 8002aa2:	6a21      	ldr	r1, [r4, #32]
 8002aa4:	602b      	str	r3, [r5, #0]
 8002aa6:	d032      	beq.n	8002b0e <__sflush_r+0x9a>
 8002aa8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002aaa:	89a3      	ldrh	r3, [r4, #12]
 8002aac:	075a      	lsls	r2, r3, #29
 8002aae:	d505      	bpl.n	8002abc <__sflush_r+0x48>
 8002ab0:	6863      	ldr	r3, [r4, #4]
 8002ab2:	1ac0      	subs	r0, r0, r3
 8002ab4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ab6:	b10b      	cbz	r3, 8002abc <__sflush_r+0x48>
 8002ab8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002aba:	1ac0      	subs	r0, r0, r3
 8002abc:	2300      	movs	r3, #0
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ac2:	6a21      	ldr	r1, [r4, #32]
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	47b0      	blx	r6
 8002ac8:	1c43      	adds	r3, r0, #1
 8002aca:	89a3      	ldrh	r3, [r4, #12]
 8002acc:	d106      	bne.n	8002adc <__sflush_r+0x68>
 8002ace:	6829      	ldr	r1, [r5, #0]
 8002ad0:	291d      	cmp	r1, #29
 8002ad2:	d848      	bhi.n	8002b66 <__sflush_r+0xf2>
 8002ad4:	4a29      	ldr	r2, [pc, #164]	; (8002b7c <__sflush_r+0x108>)
 8002ad6:	40ca      	lsrs	r2, r1
 8002ad8:	07d6      	lsls	r6, r2, #31
 8002ada:	d544      	bpl.n	8002b66 <__sflush_r+0xf2>
 8002adc:	2200      	movs	r2, #0
 8002ade:	6062      	str	r2, [r4, #4]
 8002ae0:	04d9      	lsls	r1, r3, #19
 8002ae2:	6922      	ldr	r2, [r4, #16]
 8002ae4:	6022      	str	r2, [r4, #0]
 8002ae6:	d504      	bpl.n	8002af2 <__sflush_r+0x7e>
 8002ae8:	1c42      	adds	r2, r0, #1
 8002aea:	d101      	bne.n	8002af0 <__sflush_r+0x7c>
 8002aec:	682b      	ldr	r3, [r5, #0]
 8002aee:	b903      	cbnz	r3, 8002af2 <__sflush_r+0x7e>
 8002af0:	6560      	str	r0, [r4, #84]	; 0x54
 8002af2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002af4:	602f      	str	r7, [r5, #0]
 8002af6:	2900      	cmp	r1, #0
 8002af8:	d0c9      	beq.n	8002a8e <__sflush_r+0x1a>
 8002afa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002afe:	4299      	cmp	r1, r3
 8002b00:	d002      	beq.n	8002b08 <__sflush_r+0x94>
 8002b02:	4628      	mov	r0, r5
 8002b04:	f000 f994 	bl	8002e30 <_free_r>
 8002b08:	2000      	movs	r0, #0
 8002b0a:	6360      	str	r0, [r4, #52]	; 0x34
 8002b0c:	e7c0      	b.n	8002a90 <__sflush_r+0x1c>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	4628      	mov	r0, r5
 8002b12:	47b0      	blx	r6
 8002b14:	1c41      	adds	r1, r0, #1
 8002b16:	d1c8      	bne.n	8002aaa <__sflush_r+0x36>
 8002b18:	682b      	ldr	r3, [r5, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0c5      	beq.n	8002aaa <__sflush_r+0x36>
 8002b1e:	2b1d      	cmp	r3, #29
 8002b20:	d001      	beq.n	8002b26 <__sflush_r+0xb2>
 8002b22:	2b16      	cmp	r3, #22
 8002b24:	d101      	bne.n	8002b2a <__sflush_r+0xb6>
 8002b26:	602f      	str	r7, [r5, #0]
 8002b28:	e7b1      	b.n	8002a8e <__sflush_r+0x1a>
 8002b2a:	89a3      	ldrh	r3, [r4, #12]
 8002b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b30:	81a3      	strh	r3, [r4, #12]
 8002b32:	e7ad      	b.n	8002a90 <__sflush_r+0x1c>
 8002b34:	690f      	ldr	r7, [r1, #16]
 8002b36:	2f00      	cmp	r7, #0
 8002b38:	d0a9      	beq.n	8002a8e <__sflush_r+0x1a>
 8002b3a:	0793      	lsls	r3, r2, #30
 8002b3c:	680e      	ldr	r6, [r1, #0]
 8002b3e:	bf08      	it	eq
 8002b40:	694b      	ldreq	r3, [r1, #20]
 8002b42:	600f      	str	r7, [r1, #0]
 8002b44:	bf18      	it	ne
 8002b46:	2300      	movne	r3, #0
 8002b48:	eba6 0807 	sub.w	r8, r6, r7
 8002b4c:	608b      	str	r3, [r1, #8]
 8002b4e:	f1b8 0f00 	cmp.w	r8, #0
 8002b52:	dd9c      	ble.n	8002a8e <__sflush_r+0x1a>
 8002b54:	4643      	mov	r3, r8
 8002b56:	463a      	mov	r2, r7
 8002b58:	6a21      	ldr	r1, [r4, #32]
 8002b5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b5c:	4628      	mov	r0, r5
 8002b5e:	47b0      	blx	r6
 8002b60:	2800      	cmp	r0, #0
 8002b62:	dc06      	bgt.n	8002b72 <__sflush_r+0xfe>
 8002b64:	89a3      	ldrh	r3, [r4, #12]
 8002b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b6a:	81a3      	strh	r3, [r4, #12]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b70:	e78e      	b.n	8002a90 <__sflush_r+0x1c>
 8002b72:	4407      	add	r7, r0
 8002b74:	eba8 0800 	sub.w	r8, r8, r0
 8002b78:	e7e9      	b.n	8002b4e <__sflush_r+0xda>
 8002b7a:	bf00      	nop
 8002b7c:	20400001 	.word	0x20400001

08002b80 <_fflush_r>:
 8002b80:	b538      	push	{r3, r4, r5, lr}
 8002b82:	690b      	ldr	r3, [r1, #16]
 8002b84:	4605      	mov	r5, r0
 8002b86:	460c      	mov	r4, r1
 8002b88:	b1db      	cbz	r3, 8002bc2 <_fflush_r+0x42>
 8002b8a:	b118      	cbz	r0, 8002b94 <_fflush_r+0x14>
 8002b8c:	6983      	ldr	r3, [r0, #24]
 8002b8e:	b90b      	cbnz	r3, 8002b94 <_fflush_r+0x14>
 8002b90:	f000 f860 	bl	8002c54 <__sinit>
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <_fflush_r+0x48>)
 8002b96:	429c      	cmp	r4, r3
 8002b98:	d109      	bne.n	8002bae <_fflush_r+0x2e>
 8002b9a:	686c      	ldr	r4, [r5, #4]
 8002b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ba0:	b17b      	cbz	r3, 8002bc2 <_fflush_r+0x42>
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	4628      	mov	r0, r5
 8002ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002baa:	f7ff bf63 	b.w	8002a74 <__sflush_r>
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <_fflush_r+0x4c>)
 8002bb0:	429c      	cmp	r4, r3
 8002bb2:	d101      	bne.n	8002bb8 <_fflush_r+0x38>
 8002bb4:	68ac      	ldr	r4, [r5, #8]
 8002bb6:	e7f1      	b.n	8002b9c <_fflush_r+0x1c>
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <_fflush_r+0x50>)
 8002bba:	429c      	cmp	r4, r3
 8002bbc:	bf08      	it	eq
 8002bbe:	68ec      	ldreq	r4, [r5, #12]
 8002bc0:	e7ec      	b.n	8002b9c <_fflush_r+0x1c>
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	bd38      	pop	{r3, r4, r5, pc}
 8002bc6:	bf00      	nop
 8002bc8:	08003724 	.word	0x08003724
 8002bcc:	08003744 	.word	0x08003744
 8002bd0:	08003704 	.word	0x08003704

08002bd4 <std>:
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	b510      	push	{r4, lr}
 8002bd8:	4604      	mov	r4, r0
 8002bda:	e9c0 3300 	strd	r3, r3, [r0]
 8002bde:	6083      	str	r3, [r0, #8]
 8002be0:	8181      	strh	r1, [r0, #12]
 8002be2:	6643      	str	r3, [r0, #100]	; 0x64
 8002be4:	81c2      	strh	r2, [r0, #14]
 8002be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002bea:	6183      	str	r3, [r0, #24]
 8002bec:	4619      	mov	r1, r3
 8002bee:	2208      	movs	r2, #8
 8002bf0:	305c      	adds	r0, #92	; 0x5c
 8002bf2:	f7ff fdfb 	bl	80027ec <memset>
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <std+0x38>)
 8002bf8:	6263      	str	r3, [r4, #36]	; 0x24
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <std+0x3c>)
 8002bfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <std+0x40>)
 8002c00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <std+0x44>)
 8002c04:	6224      	str	r4, [r4, #32]
 8002c06:	6323      	str	r3, [r4, #48]	; 0x30
 8002c08:	bd10      	pop	{r4, pc}
 8002c0a:	bf00      	nop
 8002c0c:	08003531 	.word	0x08003531
 8002c10:	08003553 	.word	0x08003553
 8002c14:	0800358b 	.word	0x0800358b
 8002c18:	080035af 	.word	0x080035af

08002c1c <_cleanup_r>:
 8002c1c:	4901      	ldr	r1, [pc, #4]	; (8002c24 <_cleanup_r+0x8>)
 8002c1e:	f000 b885 	b.w	8002d2c <_fwalk_reent>
 8002c22:	bf00      	nop
 8002c24:	08002b81 	.word	0x08002b81

08002c28 <__sfmoreglue>:
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	1e4a      	subs	r2, r1, #1
 8002c2c:	2568      	movs	r5, #104	; 0x68
 8002c2e:	4355      	muls	r5, r2
 8002c30:	460e      	mov	r6, r1
 8002c32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c36:	f000 f949 	bl	8002ecc <_malloc_r>
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	b140      	cbz	r0, 8002c50 <__sfmoreglue+0x28>
 8002c3e:	2100      	movs	r1, #0
 8002c40:	e9c0 1600 	strd	r1, r6, [r0]
 8002c44:	300c      	adds	r0, #12
 8002c46:	60a0      	str	r0, [r4, #8]
 8002c48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c4c:	f7ff fdce 	bl	80027ec <memset>
 8002c50:	4620      	mov	r0, r4
 8002c52:	bd70      	pop	{r4, r5, r6, pc}

08002c54 <__sinit>:
 8002c54:	6983      	ldr	r3, [r0, #24]
 8002c56:	b510      	push	{r4, lr}
 8002c58:	4604      	mov	r4, r0
 8002c5a:	bb33      	cbnz	r3, 8002caa <__sinit+0x56>
 8002c5c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002c60:	6503      	str	r3, [r0, #80]	; 0x50
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <__sinit+0x58>)
 8002c64:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <__sinit+0x5c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6282      	str	r2, [r0, #40]	; 0x28
 8002c6a:	4298      	cmp	r0, r3
 8002c6c:	bf04      	itt	eq
 8002c6e:	2301      	moveq	r3, #1
 8002c70:	6183      	streq	r3, [r0, #24]
 8002c72:	f000 f81f 	bl	8002cb4 <__sfp>
 8002c76:	6060      	str	r0, [r4, #4]
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f000 f81b 	bl	8002cb4 <__sfp>
 8002c7e:	60a0      	str	r0, [r4, #8]
 8002c80:	4620      	mov	r0, r4
 8002c82:	f000 f817 	bl	8002cb4 <__sfp>
 8002c86:	2200      	movs	r2, #0
 8002c88:	60e0      	str	r0, [r4, #12]
 8002c8a:	2104      	movs	r1, #4
 8002c8c:	6860      	ldr	r0, [r4, #4]
 8002c8e:	f7ff ffa1 	bl	8002bd4 <std>
 8002c92:	2201      	movs	r2, #1
 8002c94:	2109      	movs	r1, #9
 8002c96:	68a0      	ldr	r0, [r4, #8]
 8002c98:	f7ff ff9c 	bl	8002bd4 <std>
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	2112      	movs	r1, #18
 8002ca0:	68e0      	ldr	r0, [r4, #12]
 8002ca2:	f7ff ff97 	bl	8002bd4 <std>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61a3      	str	r3, [r4, #24]
 8002caa:	bd10      	pop	{r4, pc}
 8002cac:	08003700 	.word	0x08003700
 8002cb0:	08002c1d 	.word	0x08002c1d

08002cb4 <__sfp>:
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <__sfp+0x70>)
 8002cb8:	681e      	ldr	r6, [r3, #0]
 8002cba:	69b3      	ldr	r3, [r6, #24]
 8002cbc:	4607      	mov	r7, r0
 8002cbe:	b913      	cbnz	r3, 8002cc6 <__sfp+0x12>
 8002cc0:	4630      	mov	r0, r6
 8002cc2:	f7ff ffc7 	bl	8002c54 <__sinit>
 8002cc6:	3648      	adds	r6, #72	; 0x48
 8002cc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	d503      	bpl.n	8002cd8 <__sfp+0x24>
 8002cd0:	6833      	ldr	r3, [r6, #0]
 8002cd2:	b133      	cbz	r3, 8002ce2 <__sfp+0x2e>
 8002cd4:	6836      	ldr	r6, [r6, #0]
 8002cd6:	e7f7      	b.n	8002cc8 <__sfp+0x14>
 8002cd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002cdc:	b16d      	cbz	r5, 8002cfa <__sfp+0x46>
 8002cde:	3468      	adds	r4, #104	; 0x68
 8002ce0:	e7f4      	b.n	8002ccc <__sfp+0x18>
 8002ce2:	2104      	movs	r1, #4
 8002ce4:	4638      	mov	r0, r7
 8002ce6:	f7ff ff9f 	bl	8002c28 <__sfmoreglue>
 8002cea:	6030      	str	r0, [r6, #0]
 8002cec:	2800      	cmp	r0, #0
 8002cee:	d1f1      	bne.n	8002cd4 <__sfp+0x20>
 8002cf0:	230c      	movs	r3, #12
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4604      	mov	r4, r0
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <__sfp+0x74>)
 8002cfc:	6665      	str	r5, [r4, #100]	; 0x64
 8002cfe:	e9c4 5500 	strd	r5, r5, [r4]
 8002d02:	60a5      	str	r5, [r4, #8]
 8002d04:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002d08:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	4629      	mov	r1, r5
 8002d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d14:	f7ff fd6a 	bl	80027ec <memset>
 8002d18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d20:	e7e9      	b.n	8002cf6 <__sfp+0x42>
 8002d22:	bf00      	nop
 8002d24:	08003700 	.word	0x08003700
 8002d28:	ffff0001 	.word	0xffff0001

08002d2c <_fwalk_reent>:
 8002d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d30:	4680      	mov	r8, r0
 8002d32:	4689      	mov	r9, r1
 8002d34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d38:	2600      	movs	r6, #0
 8002d3a:	b914      	cbnz	r4, 8002d42 <_fwalk_reent+0x16>
 8002d3c:	4630      	mov	r0, r6
 8002d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d42:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002d46:	3f01      	subs	r7, #1
 8002d48:	d501      	bpl.n	8002d4e <_fwalk_reent+0x22>
 8002d4a:	6824      	ldr	r4, [r4, #0]
 8002d4c:	e7f5      	b.n	8002d3a <_fwalk_reent+0xe>
 8002d4e:	89ab      	ldrh	r3, [r5, #12]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d907      	bls.n	8002d64 <_fwalk_reent+0x38>
 8002d54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	d003      	beq.n	8002d64 <_fwalk_reent+0x38>
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	4640      	mov	r0, r8
 8002d60:	47c8      	blx	r9
 8002d62:	4306      	orrs	r6, r0
 8002d64:	3568      	adds	r5, #104	; 0x68
 8002d66:	e7ee      	b.n	8002d46 <_fwalk_reent+0x1a>

08002d68 <__swhatbuf_r>:
 8002d68:	b570      	push	{r4, r5, r6, lr}
 8002d6a:	460e      	mov	r6, r1
 8002d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d70:	2900      	cmp	r1, #0
 8002d72:	b096      	sub	sp, #88	; 0x58
 8002d74:	4614      	mov	r4, r2
 8002d76:	461d      	mov	r5, r3
 8002d78:	da07      	bge.n	8002d8a <__swhatbuf_r+0x22>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	602b      	str	r3, [r5, #0]
 8002d7e:	89b3      	ldrh	r3, [r6, #12]
 8002d80:	061a      	lsls	r2, r3, #24
 8002d82:	d410      	bmi.n	8002da6 <__swhatbuf_r+0x3e>
 8002d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d88:	e00e      	b.n	8002da8 <__swhatbuf_r+0x40>
 8002d8a:	466a      	mov	r2, sp
 8002d8c:	f000 fc36 	bl	80035fc <_fstat_r>
 8002d90:	2800      	cmp	r0, #0
 8002d92:	dbf2      	blt.n	8002d7a <__swhatbuf_r+0x12>
 8002d94:	9a01      	ldr	r2, [sp, #4]
 8002d96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d9e:	425a      	negs	r2, r3
 8002da0:	415a      	adcs	r2, r3
 8002da2:	602a      	str	r2, [r5, #0]
 8002da4:	e7ee      	b.n	8002d84 <__swhatbuf_r+0x1c>
 8002da6:	2340      	movs	r3, #64	; 0x40
 8002da8:	2000      	movs	r0, #0
 8002daa:	6023      	str	r3, [r4, #0]
 8002dac:	b016      	add	sp, #88	; 0x58
 8002dae:	bd70      	pop	{r4, r5, r6, pc}

08002db0 <__smakebuf_r>:
 8002db0:	898b      	ldrh	r3, [r1, #12]
 8002db2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002db4:	079d      	lsls	r5, r3, #30
 8002db6:	4606      	mov	r6, r0
 8002db8:	460c      	mov	r4, r1
 8002dba:	d507      	bpl.n	8002dcc <__smakebuf_r+0x1c>
 8002dbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002dc0:	6023      	str	r3, [r4, #0]
 8002dc2:	6123      	str	r3, [r4, #16]
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	6163      	str	r3, [r4, #20]
 8002dc8:	b002      	add	sp, #8
 8002dca:	bd70      	pop	{r4, r5, r6, pc}
 8002dcc:	ab01      	add	r3, sp, #4
 8002dce:	466a      	mov	r2, sp
 8002dd0:	f7ff ffca 	bl	8002d68 <__swhatbuf_r>
 8002dd4:	9900      	ldr	r1, [sp, #0]
 8002dd6:	4605      	mov	r5, r0
 8002dd8:	4630      	mov	r0, r6
 8002dda:	f000 f877 	bl	8002ecc <_malloc_r>
 8002dde:	b948      	cbnz	r0, 8002df4 <__smakebuf_r+0x44>
 8002de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002de4:	059a      	lsls	r2, r3, #22
 8002de6:	d4ef      	bmi.n	8002dc8 <__smakebuf_r+0x18>
 8002de8:	f023 0303 	bic.w	r3, r3, #3
 8002dec:	f043 0302 	orr.w	r3, r3, #2
 8002df0:	81a3      	strh	r3, [r4, #12]
 8002df2:	e7e3      	b.n	8002dbc <__smakebuf_r+0xc>
 8002df4:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <__smakebuf_r+0x7c>)
 8002df6:	62b3      	str	r3, [r6, #40]	; 0x28
 8002df8:	89a3      	ldrh	r3, [r4, #12]
 8002dfa:	6020      	str	r0, [r4, #0]
 8002dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e00:	81a3      	strh	r3, [r4, #12]
 8002e02:	9b00      	ldr	r3, [sp, #0]
 8002e04:	6163      	str	r3, [r4, #20]
 8002e06:	9b01      	ldr	r3, [sp, #4]
 8002e08:	6120      	str	r0, [r4, #16]
 8002e0a:	b15b      	cbz	r3, 8002e24 <__smakebuf_r+0x74>
 8002e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e10:	4630      	mov	r0, r6
 8002e12:	f000 fc05 	bl	8003620 <_isatty_r>
 8002e16:	b128      	cbz	r0, 8002e24 <__smakebuf_r+0x74>
 8002e18:	89a3      	ldrh	r3, [r4, #12]
 8002e1a:	f023 0303 	bic.w	r3, r3, #3
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	81a3      	strh	r3, [r4, #12]
 8002e24:	89a3      	ldrh	r3, [r4, #12]
 8002e26:	431d      	orrs	r5, r3
 8002e28:	81a5      	strh	r5, [r4, #12]
 8002e2a:	e7cd      	b.n	8002dc8 <__smakebuf_r+0x18>
 8002e2c:	08002c1d 	.word	0x08002c1d

08002e30 <_free_r>:
 8002e30:	b538      	push	{r3, r4, r5, lr}
 8002e32:	4605      	mov	r5, r0
 8002e34:	2900      	cmp	r1, #0
 8002e36:	d045      	beq.n	8002ec4 <_free_r+0x94>
 8002e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e3c:	1f0c      	subs	r4, r1, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	bfb8      	it	lt
 8002e42:	18e4      	addlt	r4, r4, r3
 8002e44:	f000 fc0e 	bl	8003664 <__malloc_lock>
 8002e48:	4a1f      	ldr	r2, [pc, #124]	; (8002ec8 <_free_r+0x98>)
 8002e4a:	6813      	ldr	r3, [r2, #0]
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	b933      	cbnz	r3, 8002e5e <_free_r+0x2e>
 8002e50:	6063      	str	r3, [r4, #4]
 8002e52:	6014      	str	r4, [r2, #0]
 8002e54:	4628      	mov	r0, r5
 8002e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e5a:	f000 bc04 	b.w	8003666 <__malloc_unlock>
 8002e5e:	42a3      	cmp	r3, r4
 8002e60:	d90c      	bls.n	8002e7c <_free_r+0x4c>
 8002e62:	6821      	ldr	r1, [r4, #0]
 8002e64:	1862      	adds	r2, r4, r1
 8002e66:	4293      	cmp	r3, r2
 8002e68:	bf04      	itt	eq
 8002e6a:	681a      	ldreq	r2, [r3, #0]
 8002e6c:	685b      	ldreq	r3, [r3, #4]
 8002e6e:	6063      	str	r3, [r4, #4]
 8002e70:	bf04      	itt	eq
 8002e72:	1852      	addeq	r2, r2, r1
 8002e74:	6022      	streq	r2, [r4, #0]
 8002e76:	6004      	str	r4, [r0, #0]
 8002e78:	e7ec      	b.n	8002e54 <_free_r+0x24>
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	b10a      	cbz	r2, 8002e84 <_free_r+0x54>
 8002e80:	42a2      	cmp	r2, r4
 8002e82:	d9fa      	bls.n	8002e7a <_free_r+0x4a>
 8002e84:	6819      	ldr	r1, [r3, #0]
 8002e86:	1858      	adds	r0, r3, r1
 8002e88:	42a0      	cmp	r0, r4
 8002e8a:	d10b      	bne.n	8002ea4 <_free_r+0x74>
 8002e8c:	6820      	ldr	r0, [r4, #0]
 8002e8e:	4401      	add	r1, r0
 8002e90:	1858      	adds	r0, r3, r1
 8002e92:	4282      	cmp	r2, r0
 8002e94:	6019      	str	r1, [r3, #0]
 8002e96:	d1dd      	bne.n	8002e54 <_free_r+0x24>
 8002e98:	6810      	ldr	r0, [r2, #0]
 8002e9a:	6852      	ldr	r2, [r2, #4]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	4401      	add	r1, r0
 8002ea0:	6019      	str	r1, [r3, #0]
 8002ea2:	e7d7      	b.n	8002e54 <_free_r+0x24>
 8002ea4:	d902      	bls.n	8002eac <_free_r+0x7c>
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	602b      	str	r3, [r5, #0]
 8002eaa:	e7d3      	b.n	8002e54 <_free_r+0x24>
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	1821      	adds	r1, r4, r0
 8002eb0:	428a      	cmp	r2, r1
 8002eb2:	bf04      	itt	eq
 8002eb4:	6811      	ldreq	r1, [r2, #0]
 8002eb6:	6852      	ldreq	r2, [r2, #4]
 8002eb8:	6062      	str	r2, [r4, #4]
 8002eba:	bf04      	itt	eq
 8002ebc:	1809      	addeq	r1, r1, r0
 8002ebe:	6021      	streq	r1, [r4, #0]
 8002ec0:	605c      	str	r4, [r3, #4]
 8002ec2:	e7c7      	b.n	8002e54 <_free_r+0x24>
 8002ec4:	bd38      	pop	{r3, r4, r5, pc}
 8002ec6:	bf00      	nop
 8002ec8:	2000009c 	.word	0x2000009c

08002ecc <_malloc_r>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	1ccd      	adds	r5, r1, #3
 8002ed0:	f025 0503 	bic.w	r5, r5, #3
 8002ed4:	3508      	adds	r5, #8
 8002ed6:	2d0c      	cmp	r5, #12
 8002ed8:	bf38      	it	cc
 8002eda:	250c      	movcc	r5, #12
 8002edc:	2d00      	cmp	r5, #0
 8002ede:	4606      	mov	r6, r0
 8002ee0:	db01      	blt.n	8002ee6 <_malloc_r+0x1a>
 8002ee2:	42a9      	cmp	r1, r5
 8002ee4:	d903      	bls.n	8002eee <_malloc_r+0x22>
 8002ee6:	230c      	movs	r3, #12
 8002ee8:	6033      	str	r3, [r6, #0]
 8002eea:	2000      	movs	r0, #0
 8002eec:	bd70      	pop	{r4, r5, r6, pc}
 8002eee:	f000 fbb9 	bl	8003664 <__malloc_lock>
 8002ef2:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <_malloc_r+0xac>)
 8002ef4:	6814      	ldr	r4, [r2, #0]
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	b991      	cbnz	r1, 8002f20 <_malloc_r+0x54>
 8002efa:	4c20      	ldr	r4, [pc, #128]	; (8002f7c <_malloc_r+0xb0>)
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	b91b      	cbnz	r3, 8002f08 <_malloc_r+0x3c>
 8002f00:	4630      	mov	r0, r6
 8002f02:	f000 fb05 	bl	8003510 <_sbrk_r>
 8002f06:	6020      	str	r0, [r4, #0]
 8002f08:	4629      	mov	r1, r5
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	f000 fb00 	bl	8003510 <_sbrk_r>
 8002f10:	1c43      	adds	r3, r0, #1
 8002f12:	d124      	bne.n	8002f5e <_malloc_r+0x92>
 8002f14:	230c      	movs	r3, #12
 8002f16:	6033      	str	r3, [r6, #0]
 8002f18:	4630      	mov	r0, r6
 8002f1a:	f000 fba4 	bl	8003666 <__malloc_unlock>
 8002f1e:	e7e4      	b.n	8002eea <_malloc_r+0x1e>
 8002f20:	680b      	ldr	r3, [r1, #0]
 8002f22:	1b5b      	subs	r3, r3, r5
 8002f24:	d418      	bmi.n	8002f58 <_malloc_r+0x8c>
 8002f26:	2b0b      	cmp	r3, #11
 8002f28:	d90f      	bls.n	8002f4a <_malloc_r+0x7e>
 8002f2a:	600b      	str	r3, [r1, #0]
 8002f2c:	50cd      	str	r5, [r1, r3]
 8002f2e:	18cc      	adds	r4, r1, r3
 8002f30:	4630      	mov	r0, r6
 8002f32:	f000 fb98 	bl	8003666 <__malloc_unlock>
 8002f36:	f104 000b 	add.w	r0, r4, #11
 8002f3a:	1d23      	adds	r3, r4, #4
 8002f3c:	f020 0007 	bic.w	r0, r0, #7
 8002f40:	1ac3      	subs	r3, r0, r3
 8002f42:	d0d3      	beq.n	8002eec <_malloc_r+0x20>
 8002f44:	425a      	negs	r2, r3
 8002f46:	50e2      	str	r2, [r4, r3]
 8002f48:	e7d0      	b.n	8002eec <_malloc_r+0x20>
 8002f4a:	428c      	cmp	r4, r1
 8002f4c:	684b      	ldr	r3, [r1, #4]
 8002f4e:	bf16      	itet	ne
 8002f50:	6063      	strne	r3, [r4, #4]
 8002f52:	6013      	streq	r3, [r2, #0]
 8002f54:	460c      	movne	r4, r1
 8002f56:	e7eb      	b.n	8002f30 <_malloc_r+0x64>
 8002f58:	460c      	mov	r4, r1
 8002f5a:	6849      	ldr	r1, [r1, #4]
 8002f5c:	e7cc      	b.n	8002ef8 <_malloc_r+0x2c>
 8002f5e:	1cc4      	adds	r4, r0, #3
 8002f60:	f024 0403 	bic.w	r4, r4, #3
 8002f64:	42a0      	cmp	r0, r4
 8002f66:	d005      	beq.n	8002f74 <_malloc_r+0xa8>
 8002f68:	1a21      	subs	r1, r4, r0
 8002f6a:	4630      	mov	r0, r6
 8002f6c:	f000 fad0 	bl	8003510 <_sbrk_r>
 8002f70:	3001      	adds	r0, #1
 8002f72:	d0cf      	beq.n	8002f14 <_malloc_r+0x48>
 8002f74:	6025      	str	r5, [r4, #0]
 8002f76:	e7db      	b.n	8002f30 <_malloc_r+0x64>
 8002f78:	2000009c 	.word	0x2000009c
 8002f7c:	200000a0 	.word	0x200000a0

08002f80 <__sfputc_r>:
 8002f80:	6893      	ldr	r3, [r2, #8]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	b410      	push	{r4}
 8002f88:	6093      	str	r3, [r2, #8]
 8002f8a:	da08      	bge.n	8002f9e <__sfputc_r+0x1e>
 8002f8c:	6994      	ldr	r4, [r2, #24]
 8002f8e:	42a3      	cmp	r3, r4
 8002f90:	db01      	blt.n	8002f96 <__sfputc_r+0x16>
 8002f92:	290a      	cmp	r1, #10
 8002f94:	d103      	bne.n	8002f9e <__sfputc_r+0x1e>
 8002f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f9a:	f7ff bcab 	b.w	80028f4 <__swbuf_r>
 8002f9e:	6813      	ldr	r3, [r2, #0]
 8002fa0:	1c58      	adds	r0, r3, #1
 8002fa2:	6010      	str	r0, [r2, #0]
 8002fa4:	7019      	strb	r1, [r3, #0]
 8002fa6:	4608      	mov	r0, r1
 8002fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <__sfputs_r>:
 8002fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb0:	4606      	mov	r6, r0
 8002fb2:	460f      	mov	r7, r1
 8002fb4:	4614      	mov	r4, r2
 8002fb6:	18d5      	adds	r5, r2, r3
 8002fb8:	42ac      	cmp	r4, r5
 8002fba:	d101      	bne.n	8002fc0 <__sfputs_r+0x12>
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	e007      	b.n	8002fd0 <__sfputs_r+0x22>
 8002fc0:	463a      	mov	r2, r7
 8002fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fc6:	4630      	mov	r0, r6
 8002fc8:	f7ff ffda 	bl	8002f80 <__sfputc_r>
 8002fcc:	1c43      	adds	r3, r0, #1
 8002fce:	d1f3      	bne.n	8002fb8 <__sfputs_r+0xa>
 8002fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002fd4 <_vfiprintf_r>:
 8002fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fd8:	460c      	mov	r4, r1
 8002fda:	b09d      	sub	sp, #116	; 0x74
 8002fdc:	4617      	mov	r7, r2
 8002fde:	461d      	mov	r5, r3
 8002fe0:	4606      	mov	r6, r0
 8002fe2:	b118      	cbz	r0, 8002fec <_vfiprintf_r+0x18>
 8002fe4:	6983      	ldr	r3, [r0, #24]
 8002fe6:	b90b      	cbnz	r3, 8002fec <_vfiprintf_r+0x18>
 8002fe8:	f7ff fe34 	bl	8002c54 <__sinit>
 8002fec:	4b7c      	ldr	r3, [pc, #496]	; (80031e0 <_vfiprintf_r+0x20c>)
 8002fee:	429c      	cmp	r4, r3
 8002ff0:	d158      	bne.n	80030a4 <_vfiprintf_r+0xd0>
 8002ff2:	6874      	ldr	r4, [r6, #4]
 8002ff4:	89a3      	ldrh	r3, [r4, #12]
 8002ff6:	0718      	lsls	r0, r3, #28
 8002ff8:	d55e      	bpl.n	80030b8 <_vfiprintf_r+0xe4>
 8002ffa:	6923      	ldr	r3, [r4, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d05b      	beq.n	80030b8 <_vfiprintf_r+0xe4>
 8003000:	2300      	movs	r3, #0
 8003002:	9309      	str	r3, [sp, #36]	; 0x24
 8003004:	2320      	movs	r3, #32
 8003006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800300a:	2330      	movs	r3, #48	; 0x30
 800300c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003010:	9503      	str	r5, [sp, #12]
 8003012:	f04f 0b01 	mov.w	fp, #1
 8003016:	46b8      	mov	r8, r7
 8003018:	4645      	mov	r5, r8
 800301a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800301e:	b10b      	cbz	r3, 8003024 <_vfiprintf_r+0x50>
 8003020:	2b25      	cmp	r3, #37	; 0x25
 8003022:	d154      	bne.n	80030ce <_vfiprintf_r+0xfa>
 8003024:	ebb8 0a07 	subs.w	sl, r8, r7
 8003028:	d00b      	beq.n	8003042 <_vfiprintf_r+0x6e>
 800302a:	4653      	mov	r3, sl
 800302c:	463a      	mov	r2, r7
 800302e:	4621      	mov	r1, r4
 8003030:	4630      	mov	r0, r6
 8003032:	f7ff ffbc 	bl	8002fae <__sfputs_r>
 8003036:	3001      	adds	r0, #1
 8003038:	f000 80c2 	beq.w	80031c0 <_vfiprintf_r+0x1ec>
 800303c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800303e:	4453      	add	r3, sl
 8003040:	9309      	str	r3, [sp, #36]	; 0x24
 8003042:	f898 3000 	ldrb.w	r3, [r8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 80ba 	beq.w	80031c0 <_vfiprintf_r+0x1ec>
 800304c:	2300      	movs	r3, #0
 800304e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003056:	9304      	str	r3, [sp, #16]
 8003058:	9307      	str	r3, [sp, #28]
 800305a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800305e:	931a      	str	r3, [sp, #104]	; 0x68
 8003060:	46a8      	mov	r8, r5
 8003062:	2205      	movs	r2, #5
 8003064:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003068:	485e      	ldr	r0, [pc, #376]	; (80031e4 <_vfiprintf_r+0x210>)
 800306a:	f7fd f8d1 	bl	8000210 <memchr>
 800306e:	9b04      	ldr	r3, [sp, #16]
 8003070:	bb78      	cbnz	r0, 80030d2 <_vfiprintf_r+0xfe>
 8003072:	06d9      	lsls	r1, r3, #27
 8003074:	bf44      	itt	mi
 8003076:	2220      	movmi	r2, #32
 8003078:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800307c:	071a      	lsls	r2, r3, #28
 800307e:	bf44      	itt	mi
 8003080:	222b      	movmi	r2, #43	; 0x2b
 8003082:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003086:	782a      	ldrb	r2, [r5, #0]
 8003088:	2a2a      	cmp	r2, #42	; 0x2a
 800308a:	d02a      	beq.n	80030e2 <_vfiprintf_r+0x10e>
 800308c:	9a07      	ldr	r2, [sp, #28]
 800308e:	46a8      	mov	r8, r5
 8003090:	2000      	movs	r0, #0
 8003092:	250a      	movs	r5, #10
 8003094:	4641      	mov	r1, r8
 8003096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800309a:	3b30      	subs	r3, #48	; 0x30
 800309c:	2b09      	cmp	r3, #9
 800309e:	d969      	bls.n	8003174 <_vfiprintf_r+0x1a0>
 80030a0:	b360      	cbz	r0, 80030fc <_vfiprintf_r+0x128>
 80030a2:	e024      	b.n	80030ee <_vfiprintf_r+0x11a>
 80030a4:	4b50      	ldr	r3, [pc, #320]	; (80031e8 <_vfiprintf_r+0x214>)
 80030a6:	429c      	cmp	r4, r3
 80030a8:	d101      	bne.n	80030ae <_vfiprintf_r+0xda>
 80030aa:	68b4      	ldr	r4, [r6, #8]
 80030ac:	e7a2      	b.n	8002ff4 <_vfiprintf_r+0x20>
 80030ae:	4b4f      	ldr	r3, [pc, #316]	; (80031ec <_vfiprintf_r+0x218>)
 80030b0:	429c      	cmp	r4, r3
 80030b2:	bf08      	it	eq
 80030b4:	68f4      	ldreq	r4, [r6, #12]
 80030b6:	e79d      	b.n	8002ff4 <_vfiprintf_r+0x20>
 80030b8:	4621      	mov	r1, r4
 80030ba:	4630      	mov	r0, r6
 80030bc:	f7ff fc6c 	bl	8002998 <__swsetup_r>
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d09d      	beq.n	8003000 <_vfiprintf_r+0x2c>
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030c8:	b01d      	add	sp, #116	; 0x74
 80030ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ce:	46a8      	mov	r8, r5
 80030d0:	e7a2      	b.n	8003018 <_vfiprintf_r+0x44>
 80030d2:	4a44      	ldr	r2, [pc, #272]	; (80031e4 <_vfiprintf_r+0x210>)
 80030d4:	1a80      	subs	r0, r0, r2
 80030d6:	fa0b f000 	lsl.w	r0, fp, r0
 80030da:	4318      	orrs	r0, r3
 80030dc:	9004      	str	r0, [sp, #16]
 80030de:	4645      	mov	r5, r8
 80030e0:	e7be      	b.n	8003060 <_vfiprintf_r+0x8c>
 80030e2:	9a03      	ldr	r2, [sp, #12]
 80030e4:	1d11      	adds	r1, r2, #4
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	9103      	str	r1, [sp, #12]
 80030ea:	2a00      	cmp	r2, #0
 80030ec:	db01      	blt.n	80030f2 <_vfiprintf_r+0x11e>
 80030ee:	9207      	str	r2, [sp, #28]
 80030f0:	e004      	b.n	80030fc <_vfiprintf_r+0x128>
 80030f2:	4252      	negs	r2, r2
 80030f4:	f043 0302 	orr.w	r3, r3, #2
 80030f8:	9207      	str	r2, [sp, #28]
 80030fa:	9304      	str	r3, [sp, #16]
 80030fc:	f898 3000 	ldrb.w	r3, [r8]
 8003100:	2b2e      	cmp	r3, #46	; 0x2e
 8003102:	d10e      	bne.n	8003122 <_vfiprintf_r+0x14e>
 8003104:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003108:	2b2a      	cmp	r3, #42	; 0x2a
 800310a:	d138      	bne.n	800317e <_vfiprintf_r+0x1aa>
 800310c:	9b03      	ldr	r3, [sp, #12]
 800310e:	1d1a      	adds	r2, r3, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	9203      	str	r2, [sp, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	bfb8      	it	lt
 8003118:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800311c:	f108 0802 	add.w	r8, r8, #2
 8003120:	9305      	str	r3, [sp, #20]
 8003122:	4d33      	ldr	r5, [pc, #204]	; (80031f0 <_vfiprintf_r+0x21c>)
 8003124:	f898 1000 	ldrb.w	r1, [r8]
 8003128:	2203      	movs	r2, #3
 800312a:	4628      	mov	r0, r5
 800312c:	f7fd f870 	bl	8000210 <memchr>
 8003130:	b140      	cbz	r0, 8003144 <_vfiprintf_r+0x170>
 8003132:	2340      	movs	r3, #64	; 0x40
 8003134:	1b40      	subs	r0, r0, r5
 8003136:	fa03 f000 	lsl.w	r0, r3, r0
 800313a:	9b04      	ldr	r3, [sp, #16]
 800313c:	4303      	orrs	r3, r0
 800313e:	f108 0801 	add.w	r8, r8, #1
 8003142:	9304      	str	r3, [sp, #16]
 8003144:	f898 1000 	ldrb.w	r1, [r8]
 8003148:	482a      	ldr	r0, [pc, #168]	; (80031f4 <_vfiprintf_r+0x220>)
 800314a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800314e:	2206      	movs	r2, #6
 8003150:	f108 0701 	add.w	r7, r8, #1
 8003154:	f7fd f85c 	bl	8000210 <memchr>
 8003158:	2800      	cmp	r0, #0
 800315a:	d037      	beq.n	80031cc <_vfiprintf_r+0x1f8>
 800315c:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <_vfiprintf_r+0x224>)
 800315e:	bb1b      	cbnz	r3, 80031a8 <_vfiprintf_r+0x1d4>
 8003160:	9b03      	ldr	r3, [sp, #12]
 8003162:	3307      	adds	r3, #7
 8003164:	f023 0307 	bic.w	r3, r3, #7
 8003168:	3308      	adds	r3, #8
 800316a:	9303      	str	r3, [sp, #12]
 800316c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800316e:	444b      	add	r3, r9
 8003170:	9309      	str	r3, [sp, #36]	; 0x24
 8003172:	e750      	b.n	8003016 <_vfiprintf_r+0x42>
 8003174:	fb05 3202 	mla	r2, r5, r2, r3
 8003178:	2001      	movs	r0, #1
 800317a:	4688      	mov	r8, r1
 800317c:	e78a      	b.n	8003094 <_vfiprintf_r+0xc0>
 800317e:	2300      	movs	r3, #0
 8003180:	f108 0801 	add.w	r8, r8, #1
 8003184:	9305      	str	r3, [sp, #20]
 8003186:	4619      	mov	r1, r3
 8003188:	250a      	movs	r5, #10
 800318a:	4640      	mov	r0, r8
 800318c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003190:	3a30      	subs	r2, #48	; 0x30
 8003192:	2a09      	cmp	r2, #9
 8003194:	d903      	bls.n	800319e <_vfiprintf_r+0x1ca>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0c3      	beq.n	8003122 <_vfiprintf_r+0x14e>
 800319a:	9105      	str	r1, [sp, #20]
 800319c:	e7c1      	b.n	8003122 <_vfiprintf_r+0x14e>
 800319e:	fb05 2101 	mla	r1, r5, r1, r2
 80031a2:	2301      	movs	r3, #1
 80031a4:	4680      	mov	r8, r0
 80031a6:	e7f0      	b.n	800318a <_vfiprintf_r+0x1b6>
 80031a8:	ab03      	add	r3, sp, #12
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	4622      	mov	r2, r4
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <_vfiprintf_r+0x228>)
 80031b0:	a904      	add	r1, sp, #16
 80031b2:	4630      	mov	r0, r6
 80031b4:	f3af 8000 	nop.w
 80031b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80031bc:	4681      	mov	r9, r0
 80031be:	d1d5      	bne.n	800316c <_vfiprintf_r+0x198>
 80031c0:	89a3      	ldrh	r3, [r4, #12]
 80031c2:	065b      	lsls	r3, r3, #25
 80031c4:	f53f af7e 	bmi.w	80030c4 <_vfiprintf_r+0xf0>
 80031c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031ca:	e77d      	b.n	80030c8 <_vfiprintf_r+0xf4>
 80031cc:	ab03      	add	r3, sp, #12
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	4622      	mov	r2, r4
 80031d2:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <_vfiprintf_r+0x228>)
 80031d4:	a904      	add	r1, sp, #16
 80031d6:	4630      	mov	r0, r6
 80031d8:	f000 f888 	bl	80032ec <_printf_i>
 80031dc:	e7ec      	b.n	80031b8 <_vfiprintf_r+0x1e4>
 80031de:	bf00      	nop
 80031e0:	08003724 	.word	0x08003724
 80031e4:	08003764 	.word	0x08003764
 80031e8:	08003744 	.word	0x08003744
 80031ec:	08003704 	.word	0x08003704
 80031f0:	0800376a 	.word	0x0800376a
 80031f4:	0800376e 	.word	0x0800376e
 80031f8:	00000000 	.word	0x00000000
 80031fc:	08002faf 	.word	0x08002faf

08003200 <_printf_common>:
 8003200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003204:	4691      	mov	r9, r2
 8003206:	461f      	mov	r7, r3
 8003208:	688a      	ldr	r2, [r1, #8]
 800320a:	690b      	ldr	r3, [r1, #16]
 800320c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003210:	4293      	cmp	r3, r2
 8003212:	bfb8      	it	lt
 8003214:	4613      	movlt	r3, r2
 8003216:	f8c9 3000 	str.w	r3, [r9]
 800321a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800321e:	4606      	mov	r6, r0
 8003220:	460c      	mov	r4, r1
 8003222:	b112      	cbz	r2, 800322a <_printf_common+0x2a>
 8003224:	3301      	adds	r3, #1
 8003226:	f8c9 3000 	str.w	r3, [r9]
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	0699      	lsls	r1, r3, #26
 800322e:	bf42      	ittt	mi
 8003230:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003234:	3302      	addmi	r3, #2
 8003236:	f8c9 3000 	strmi.w	r3, [r9]
 800323a:	6825      	ldr	r5, [r4, #0]
 800323c:	f015 0506 	ands.w	r5, r5, #6
 8003240:	d107      	bne.n	8003252 <_printf_common+0x52>
 8003242:	f104 0a19 	add.w	sl, r4, #25
 8003246:	68e3      	ldr	r3, [r4, #12]
 8003248:	f8d9 2000 	ldr.w	r2, [r9]
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	42ab      	cmp	r3, r5
 8003250:	dc28      	bgt.n	80032a4 <_printf_common+0xa4>
 8003252:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003256:	6822      	ldr	r2, [r4, #0]
 8003258:	3300      	adds	r3, #0
 800325a:	bf18      	it	ne
 800325c:	2301      	movne	r3, #1
 800325e:	0692      	lsls	r2, r2, #26
 8003260:	d42d      	bmi.n	80032be <_printf_common+0xbe>
 8003262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003266:	4639      	mov	r1, r7
 8003268:	4630      	mov	r0, r6
 800326a:	47c0      	blx	r8
 800326c:	3001      	adds	r0, #1
 800326e:	d020      	beq.n	80032b2 <_printf_common+0xb2>
 8003270:	6823      	ldr	r3, [r4, #0]
 8003272:	68e5      	ldr	r5, [r4, #12]
 8003274:	f8d9 2000 	ldr.w	r2, [r9]
 8003278:	f003 0306 	and.w	r3, r3, #6
 800327c:	2b04      	cmp	r3, #4
 800327e:	bf08      	it	eq
 8003280:	1aad      	subeq	r5, r5, r2
 8003282:	68a3      	ldr	r3, [r4, #8]
 8003284:	6922      	ldr	r2, [r4, #16]
 8003286:	bf0c      	ite	eq
 8003288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800328c:	2500      	movne	r5, #0
 800328e:	4293      	cmp	r3, r2
 8003290:	bfc4      	itt	gt
 8003292:	1a9b      	subgt	r3, r3, r2
 8003294:	18ed      	addgt	r5, r5, r3
 8003296:	f04f 0900 	mov.w	r9, #0
 800329a:	341a      	adds	r4, #26
 800329c:	454d      	cmp	r5, r9
 800329e:	d11a      	bne.n	80032d6 <_printf_common+0xd6>
 80032a0:	2000      	movs	r0, #0
 80032a2:	e008      	b.n	80032b6 <_printf_common+0xb6>
 80032a4:	2301      	movs	r3, #1
 80032a6:	4652      	mov	r2, sl
 80032a8:	4639      	mov	r1, r7
 80032aa:	4630      	mov	r0, r6
 80032ac:	47c0      	blx	r8
 80032ae:	3001      	adds	r0, #1
 80032b0:	d103      	bne.n	80032ba <_printf_common+0xba>
 80032b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ba:	3501      	adds	r5, #1
 80032bc:	e7c3      	b.n	8003246 <_printf_common+0x46>
 80032be:	18e1      	adds	r1, r4, r3
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	2030      	movs	r0, #48	; 0x30
 80032c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032c8:	4422      	add	r2, r4
 80032ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032d2:	3302      	adds	r3, #2
 80032d4:	e7c5      	b.n	8003262 <_printf_common+0x62>
 80032d6:	2301      	movs	r3, #1
 80032d8:	4622      	mov	r2, r4
 80032da:	4639      	mov	r1, r7
 80032dc:	4630      	mov	r0, r6
 80032de:	47c0      	blx	r8
 80032e0:	3001      	adds	r0, #1
 80032e2:	d0e6      	beq.n	80032b2 <_printf_common+0xb2>
 80032e4:	f109 0901 	add.w	r9, r9, #1
 80032e8:	e7d8      	b.n	800329c <_printf_common+0x9c>
	...

080032ec <_printf_i>:
 80032ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80032f4:	460c      	mov	r4, r1
 80032f6:	7e09      	ldrb	r1, [r1, #24]
 80032f8:	b085      	sub	sp, #20
 80032fa:	296e      	cmp	r1, #110	; 0x6e
 80032fc:	4617      	mov	r7, r2
 80032fe:	4606      	mov	r6, r0
 8003300:	4698      	mov	r8, r3
 8003302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003304:	f000 80b3 	beq.w	800346e <_printf_i+0x182>
 8003308:	d822      	bhi.n	8003350 <_printf_i+0x64>
 800330a:	2963      	cmp	r1, #99	; 0x63
 800330c:	d036      	beq.n	800337c <_printf_i+0x90>
 800330e:	d80a      	bhi.n	8003326 <_printf_i+0x3a>
 8003310:	2900      	cmp	r1, #0
 8003312:	f000 80b9 	beq.w	8003488 <_printf_i+0x19c>
 8003316:	2958      	cmp	r1, #88	; 0x58
 8003318:	f000 8083 	beq.w	8003422 <_printf_i+0x136>
 800331c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003320:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003324:	e032      	b.n	800338c <_printf_i+0xa0>
 8003326:	2964      	cmp	r1, #100	; 0x64
 8003328:	d001      	beq.n	800332e <_printf_i+0x42>
 800332a:	2969      	cmp	r1, #105	; 0x69
 800332c:	d1f6      	bne.n	800331c <_printf_i+0x30>
 800332e:	6820      	ldr	r0, [r4, #0]
 8003330:	6813      	ldr	r3, [r2, #0]
 8003332:	0605      	lsls	r5, r0, #24
 8003334:	f103 0104 	add.w	r1, r3, #4
 8003338:	d52a      	bpl.n	8003390 <_printf_i+0xa4>
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6011      	str	r1, [r2, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	da03      	bge.n	800334a <_printf_i+0x5e>
 8003342:	222d      	movs	r2, #45	; 0x2d
 8003344:	425b      	negs	r3, r3
 8003346:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800334a:	486f      	ldr	r0, [pc, #444]	; (8003508 <_printf_i+0x21c>)
 800334c:	220a      	movs	r2, #10
 800334e:	e039      	b.n	80033c4 <_printf_i+0xd8>
 8003350:	2973      	cmp	r1, #115	; 0x73
 8003352:	f000 809d 	beq.w	8003490 <_printf_i+0x1a4>
 8003356:	d808      	bhi.n	800336a <_printf_i+0x7e>
 8003358:	296f      	cmp	r1, #111	; 0x6f
 800335a:	d020      	beq.n	800339e <_printf_i+0xb2>
 800335c:	2970      	cmp	r1, #112	; 0x70
 800335e:	d1dd      	bne.n	800331c <_printf_i+0x30>
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	f043 0320 	orr.w	r3, r3, #32
 8003366:	6023      	str	r3, [r4, #0]
 8003368:	e003      	b.n	8003372 <_printf_i+0x86>
 800336a:	2975      	cmp	r1, #117	; 0x75
 800336c:	d017      	beq.n	800339e <_printf_i+0xb2>
 800336e:	2978      	cmp	r1, #120	; 0x78
 8003370:	d1d4      	bne.n	800331c <_printf_i+0x30>
 8003372:	2378      	movs	r3, #120	; 0x78
 8003374:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003378:	4864      	ldr	r0, [pc, #400]	; (800350c <_printf_i+0x220>)
 800337a:	e055      	b.n	8003428 <_printf_i+0x13c>
 800337c:	6813      	ldr	r3, [r2, #0]
 800337e:	1d19      	adds	r1, r3, #4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6011      	str	r1, [r2, #0]
 8003384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800338c:	2301      	movs	r3, #1
 800338e:	e08c      	b.n	80034aa <_printf_i+0x1be>
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6011      	str	r1, [r2, #0]
 8003394:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003398:	bf18      	it	ne
 800339a:	b21b      	sxthne	r3, r3
 800339c:	e7cf      	b.n	800333e <_printf_i+0x52>
 800339e:	6813      	ldr	r3, [r2, #0]
 80033a0:	6825      	ldr	r5, [r4, #0]
 80033a2:	1d18      	adds	r0, r3, #4
 80033a4:	6010      	str	r0, [r2, #0]
 80033a6:	0628      	lsls	r0, r5, #24
 80033a8:	d501      	bpl.n	80033ae <_printf_i+0xc2>
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	e002      	b.n	80033b4 <_printf_i+0xc8>
 80033ae:	0668      	lsls	r0, r5, #25
 80033b0:	d5fb      	bpl.n	80033aa <_printf_i+0xbe>
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	4854      	ldr	r0, [pc, #336]	; (8003508 <_printf_i+0x21c>)
 80033b6:	296f      	cmp	r1, #111	; 0x6f
 80033b8:	bf14      	ite	ne
 80033ba:	220a      	movne	r2, #10
 80033bc:	2208      	moveq	r2, #8
 80033be:	2100      	movs	r1, #0
 80033c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033c4:	6865      	ldr	r5, [r4, #4]
 80033c6:	60a5      	str	r5, [r4, #8]
 80033c8:	2d00      	cmp	r5, #0
 80033ca:	f2c0 8095 	blt.w	80034f8 <_printf_i+0x20c>
 80033ce:	6821      	ldr	r1, [r4, #0]
 80033d0:	f021 0104 	bic.w	r1, r1, #4
 80033d4:	6021      	str	r1, [r4, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d13d      	bne.n	8003456 <_printf_i+0x16a>
 80033da:	2d00      	cmp	r5, #0
 80033dc:	f040 808e 	bne.w	80034fc <_printf_i+0x210>
 80033e0:	4665      	mov	r5, ip
 80033e2:	2a08      	cmp	r2, #8
 80033e4:	d10b      	bne.n	80033fe <_printf_i+0x112>
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	07db      	lsls	r3, r3, #31
 80033ea:	d508      	bpl.n	80033fe <_printf_i+0x112>
 80033ec:	6923      	ldr	r3, [r4, #16]
 80033ee:	6862      	ldr	r2, [r4, #4]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	bfde      	ittt	le
 80033f4:	2330      	movle	r3, #48	; 0x30
 80033f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80033fe:	ebac 0305 	sub.w	r3, ip, r5
 8003402:	6123      	str	r3, [r4, #16]
 8003404:	f8cd 8000 	str.w	r8, [sp]
 8003408:	463b      	mov	r3, r7
 800340a:	aa03      	add	r2, sp, #12
 800340c:	4621      	mov	r1, r4
 800340e:	4630      	mov	r0, r6
 8003410:	f7ff fef6 	bl	8003200 <_printf_common>
 8003414:	3001      	adds	r0, #1
 8003416:	d14d      	bne.n	80034b4 <_printf_i+0x1c8>
 8003418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800341c:	b005      	add	sp, #20
 800341e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003422:	4839      	ldr	r0, [pc, #228]	; (8003508 <_printf_i+0x21c>)
 8003424:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003428:	6813      	ldr	r3, [r2, #0]
 800342a:	6821      	ldr	r1, [r4, #0]
 800342c:	1d1d      	adds	r5, r3, #4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6015      	str	r5, [r2, #0]
 8003432:	060a      	lsls	r2, r1, #24
 8003434:	d50b      	bpl.n	800344e <_printf_i+0x162>
 8003436:	07ca      	lsls	r2, r1, #31
 8003438:	bf44      	itt	mi
 800343a:	f041 0120 	orrmi.w	r1, r1, #32
 800343e:	6021      	strmi	r1, [r4, #0]
 8003440:	b91b      	cbnz	r3, 800344a <_printf_i+0x15e>
 8003442:	6822      	ldr	r2, [r4, #0]
 8003444:	f022 0220 	bic.w	r2, r2, #32
 8003448:	6022      	str	r2, [r4, #0]
 800344a:	2210      	movs	r2, #16
 800344c:	e7b7      	b.n	80033be <_printf_i+0xd2>
 800344e:	064d      	lsls	r5, r1, #25
 8003450:	bf48      	it	mi
 8003452:	b29b      	uxthmi	r3, r3
 8003454:	e7ef      	b.n	8003436 <_printf_i+0x14a>
 8003456:	4665      	mov	r5, ip
 8003458:	fbb3 f1f2 	udiv	r1, r3, r2
 800345c:	fb02 3311 	mls	r3, r2, r1, r3
 8003460:	5cc3      	ldrb	r3, [r0, r3]
 8003462:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003466:	460b      	mov	r3, r1
 8003468:	2900      	cmp	r1, #0
 800346a:	d1f5      	bne.n	8003458 <_printf_i+0x16c>
 800346c:	e7b9      	b.n	80033e2 <_printf_i+0xf6>
 800346e:	6813      	ldr	r3, [r2, #0]
 8003470:	6825      	ldr	r5, [r4, #0]
 8003472:	6961      	ldr	r1, [r4, #20]
 8003474:	1d18      	adds	r0, r3, #4
 8003476:	6010      	str	r0, [r2, #0]
 8003478:	0628      	lsls	r0, r5, #24
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	d501      	bpl.n	8003482 <_printf_i+0x196>
 800347e:	6019      	str	r1, [r3, #0]
 8003480:	e002      	b.n	8003488 <_printf_i+0x19c>
 8003482:	066a      	lsls	r2, r5, #25
 8003484:	d5fb      	bpl.n	800347e <_printf_i+0x192>
 8003486:	8019      	strh	r1, [r3, #0]
 8003488:	2300      	movs	r3, #0
 800348a:	6123      	str	r3, [r4, #16]
 800348c:	4665      	mov	r5, ip
 800348e:	e7b9      	b.n	8003404 <_printf_i+0x118>
 8003490:	6813      	ldr	r3, [r2, #0]
 8003492:	1d19      	adds	r1, r3, #4
 8003494:	6011      	str	r1, [r2, #0]
 8003496:	681d      	ldr	r5, [r3, #0]
 8003498:	6862      	ldr	r2, [r4, #4]
 800349a:	2100      	movs	r1, #0
 800349c:	4628      	mov	r0, r5
 800349e:	f7fc feb7 	bl	8000210 <memchr>
 80034a2:	b108      	cbz	r0, 80034a8 <_printf_i+0x1bc>
 80034a4:	1b40      	subs	r0, r0, r5
 80034a6:	6060      	str	r0, [r4, #4]
 80034a8:	6863      	ldr	r3, [r4, #4]
 80034aa:	6123      	str	r3, [r4, #16]
 80034ac:	2300      	movs	r3, #0
 80034ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034b2:	e7a7      	b.n	8003404 <_printf_i+0x118>
 80034b4:	6923      	ldr	r3, [r4, #16]
 80034b6:	462a      	mov	r2, r5
 80034b8:	4639      	mov	r1, r7
 80034ba:	4630      	mov	r0, r6
 80034bc:	47c0      	blx	r8
 80034be:	3001      	adds	r0, #1
 80034c0:	d0aa      	beq.n	8003418 <_printf_i+0x12c>
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	079b      	lsls	r3, r3, #30
 80034c6:	d413      	bmi.n	80034f0 <_printf_i+0x204>
 80034c8:	68e0      	ldr	r0, [r4, #12]
 80034ca:	9b03      	ldr	r3, [sp, #12]
 80034cc:	4298      	cmp	r0, r3
 80034ce:	bfb8      	it	lt
 80034d0:	4618      	movlt	r0, r3
 80034d2:	e7a3      	b.n	800341c <_printf_i+0x130>
 80034d4:	2301      	movs	r3, #1
 80034d6:	464a      	mov	r2, r9
 80034d8:	4639      	mov	r1, r7
 80034da:	4630      	mov	r0, r6
 80034dc:	47c0      	blx	r8
 80034de:	3001      	adds	r0, #1
 80034e0:	d09a      	beq.n	8003418 <_printf_i+0x12c>
 80034e2:	3501      	adds	r5, #1
 80034e4:	68e3      	ldr	r3, [r4, #12]
 80034e6:	9a03      	ldr	r2, [sp, #12]
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	42ab      	cmp	r3, r5
 80034ec:	dcf2      	bgt.n	80034d4 <_printf_i+0x1e8>
 80034ee:	e7eb      	b.n	80034c8 <_printf_i+0x1dc>
 80034f0:	2500      	movs	r5, #0
 80034f2:	f104 0919 	add.w	r9, r4, #25
 80034f6:	e7f5      	b.n	80034e4 <_printf_i+0x1f8>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1ac      	bne.n	8003456 <_printf_i+0x16a>
 80034fc:	7803      	ldrb	r3, [r0, #0]
 80034fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003502:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003506:	e76c      	b.n	80033e2 <_printf_i+0xf6>
 8003508:	08003775 	.word	0x08003775
 800350c:	08003786 	.word	0x08003786

08003510 <_sbrk_r>:
 8003510:	b538      	push	{r3, r4, r5, lr}
 8003512:	4c06      	ldr	r4, [pc, #24]	; (800352c <_sbrk_r+0x1c>)
 8003514:	2300      	movs	r3, #0
 8003516:	4605      	mov	r5, r0
 8003518:	4608      	mov	r0, r1
 800351a:	6023      	str	r3, [r4, #0]
 800351c:	f7fd fc8e 	bl	8000e3c <_sbrk>
 8003520:	1c43      	adds	r3, r0, #1
 8003522:	d102      	bne.n	800352a <_sbrk_r+0x1a>
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	b103      	cbz	r3, 800352a <_sbrk_r+0x1a>
 8003528:	602b      	str	r3, [r5, #0]
 800352a:	bd38      	pop	{r3, r4, r5, pc}
 800352c:	200000f0 	.word	0x200000f0

08003530 <__sread>:
 8003530:	b510      	push	{r4, lr}
 8003532:	460c      	mov	r4, r1
 8003534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003538:	f000 f896 	bl	8003668 <_read_r>
 800353c:	2800      	cmp	r0, #0
 800353e:	bfab      	itete	ge
 8003540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003542:	89a3      	ldrhlt	r3, [r4, #12]
 8003544:	181b      	addge	r3, r3, r0
 8003546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800354a:	bfac      	ite	ge
 800354c:	6563      	strge	r3, [r4, #84]	; 0x54
 800354e:	81a3      	strhlt	r3, [r4, #12]
 8003550:	bd10      	pop	{r4, pc}

08003552 <__swrite>:
 8003552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003556:	461f      	mov	r7, r3
 8003558:	898b      	ldrh	r3, [r1, #12]
 800355a:	05db      	lsls	r3, r3, #23
 800355c:	4605      	mov	r5, r0
 800355e:	460c      	mov	r4, r1
 8003560:	4616      	mov	r6, r2
 8003562:	d505      	bpl.n	8003570 <__swrite+0x1e>
 8003564:	2302      	movs	r3, #2
 8003566:	2200      	movs	r2, #0
 8003568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800356c:	f000 f868 	bl	8003640 <_lseek_r>
 8003570:	89a3      	ldrh	r3, [r4, #12]
 8003572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800357a:	81a3      	strh	r3, [r4, #12]
 800357c:	4632      	mov	r2, r6
 800357e:	463b      	mov	r3, r7
 8003580:	4628      	mov	r0, r5
 8003582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003586:	f000 b817 	b.w	80035b8 <_write_r>

0800358a <__sseek>:
 800358a:	b510      	push	{r4, lr}
 800358c:	460c      	mov	r4, r1
 800358e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003592:	f000 f855 	bl	8003640 <_lseek_r>
 8003596:	1c43      	adds	r3, r0, #1
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	bf15      	itete	ne
 800359c:	6560      	strne	r0, [r4, #84]	; 0x54
 800359e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035a6:	81a3      	strheq	r3, [r4, #12]
 80035a8:	bf18      	it	ne
 80035aa:	81a3      	strhne	r3, [r4, #12]
 80035ac:	bd10      	pop	{r4, pc}

080035ae <__sclose>:
 80035ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b2:	f000 b813 	b.w	80035dc <_close_r>
	...

080035b8 <_write_r>:
 80035b8:	b538      	push	{r3, r4, r5, lr}
 80035ba:	4c07      	ldr	r4, [pc, #28]	; (80035d8 <_write_r+0x20>)
 80035bc:	4605      	mov	r5, r0
 80035be:	4608      	mov	r0, r1
 80035c0:	4611      	mov	r1, r2
 80035c2:	2200      	movs	r2, #0
 80035c4:	6022      	str	r2, [r4, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f7fd fbe8 	bl	8000d9c <_write>
 80035cc:	1c43      	adds	r3, r0, #1
 80035ce:	d102      	bne.n	80035d6 <_write_r+0x1e>
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	b103      	cbz	r3, 80035d6 <_write_r+0x1e>
 80035d4:	602b      	str	r3, [r5, #0]
 80035d6:	bd38      	pop	{r3, r4, r5, pc}
 80035d8:	200000f0 	.word	0x200000f0

080035dc <_close_r>:
 80035dc:	b538      	push	{r3, r4, r5, lr}
 80035de:	4c06      	ldr	r4, [pc, #24]	; (80035f8 <_close_r+0x1c>)
 80035e0:	2300      	movs	r3, #0
 80035e2:	4605      	mov	r5, r0
 80035e4:	4608      	mov	r0, r1
 80035e6:	6023      	str	r3, [r4, #0]
 80035e8:	f7fd fbf4 	bl	8000dd4 <_close>
 80035ec:	1c43      	adds	r3, r0, #1
 80035ee:	d102      	bne.n	80035f6 <_close_r+0x1a>
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	b103      	cbz	r3, 80035f6 <_close_r+0x1a>
 80035f4:	602b      	str	r3, [r5, #0]
 80035f6:	bd38      	pop	{r3, r4, r5, pc}
 80035f8:	200000f0 	.word	0x200000f0

080035fc <_fstat_r>:
 80035fc:	b538      	push	{r3, r4, r5, lr}
 80035fe:	4c07      	ldr	r4, [pc, #28]	; (800361c <_fstat_r+0x20>)
 8003600:	2300      	movs	r3, #0
 8003602:	4605      	mov	r5, r0
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	6023      	str	r3, [r4, #0]
 800360a:	f7fd fbef 	bl	8000dec <_fstat>
 800360e:	1c43      	adds	r3, r0, #1
 8003610:	d102      	bne.n	8003618 <_fstat_r+0x1c>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	b103      	cbz	r3, 8003618 <_fstat_r+0x1c>
 8003616:	602b      	str	r3, [r5, #0]
 8003618:	bd38      	pop	{r3, r4, r5, pc}
 800361a:	bf00      	nop
 800361c:	200000f0 	.word	0x200000f0

08003620 <_isatty_r>:
 8003620:	b538      	push	{r3, r4, r5, lr}
 8003622:	4c06      	ldr	r4, [pc, #24]	; (800363c <_isatty_r+0x1c>)
 8003624:	2300      	movs	r3, #0
 8003626:	4605      	mov	r5, r0
 8003628:	4608      	mov	r0, r1
 800362a:	6023      	str	r3, [r4, #0]
 800362c:	f7fd fbee 	bl	8000e0c <_isatty>
 8003630:	1c43      	adds	r3, r0, #1
 8003632:	d102      	bne.n	800363a <_isatty_r+0x1a>
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	b103      	cbz	r3, 800363a <_isatty_r+0x1a>
 8003638:	602b      	str	r3, [r5, #0]
 800363a:	bd38      	pop	{r3, r4, r5, pc}
 800363c:	200000f0 	.word	0x200000f0

08003640 <_lseek_r>:
 8003640:	b538      	push	{r3, r4, r5, lr}
 8003642:	4c07      	ldr	r4, [pc, #28]	; (8003660 <_lseek_r+0x20>)
 8003644:	4605      	mov	r5, r0
 8003646:	4608      	mov	r0, r1
 8003648:	4611      	mov	r1, r2
 800364a:	2200      	movs	r2, #0
 800364c:	6022      	str	r2, [r4, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	f7fd fbe7 	bl	8000e22 <_lseek>
 8003654:	1c43      	adds	r3, r0, #1
 8003656:	d102      	bne.n	800365e <_lseek_r+0x1e>
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	b103      	cbz	r3, 800365e <_lseek_r+0x1e>
 800365c:	602b      	str	r3, [r5, #0]
 800365e:	bd38      	pop	{r3, r4, r5, pc}
 8003660:	200000f0 	.word	0x200000f0

08003664 <__malloc_lock>:
 8003664:	4770      	bx	lr

08003666 <__malloc_unlock>:
 8003666:	4770      	bx	lr

08003668 <_read_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	4c07      	ldr	r4, [pc, #28]	; (8003688 <_read_r+0x20>)
 800366c:	4605      	mov	r5, r0
 800366e:	4608      	mov	r0, r1
 8003670:	4611      	mov	r1, r2
 8003672:	2200      	movs	r2, #0
 8003674:	6022      	str	r2, [r4, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	f7fd fb73 	bl	8000d62 <_read>
 800367c:	1c43      	adds	r3, r0, #1
 800367e:	d102      	bne.n	8003686 <_read_r+0x1e>
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	b103      	cbz	r3, 8003686 <_read_r+0x1e>
 8003684:	602b      	str	r3, [r5, #0]
 8003686:	bd38      	pop	{r3, r4, r5, pc}
 8003688:	200000f0 	.word	0x200000f0

0800368c <_init>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	bf00      	nop
 8003690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003692:	bc08      	pop	{r3}
 8003694:	469e      	mov	lr, r3
 8003696:	4770      	bx	lr

08003698 <_fini>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	bf00      	nop
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr
